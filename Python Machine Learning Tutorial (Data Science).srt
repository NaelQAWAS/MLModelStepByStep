1
00:00:00,000 --> 00:00:01,599
[Music]

2
00:00:01,599 --> 00:00:02,879
if you're looking for a machine learning

3
00:00:02,879 --> 00:00:04,720
tutorial with python and jupyter

4
00:00:04,720 --> 00:00:05,440
notebook

5
00:00:05,440 --> 00:00:07,200
this tutorial is for you you're going to

6
00:00:07,200 --> 00:00:09,360
learn how to solve a real world problem

7
00:00:09,360 --> 00:00:11,440
using machine learning and python we're

8
00:00:11,440 --> 00:00:12,559
going to start off with a brief

9
00:00:12,559 --> 00:00:14,080
introduction to machine learning

10
00:00:14,080 --> 00:00:15,519
then we're going to talk about the tools

11
00:00:15,519 --> 00:00:17,119
you need and after that we're going to

12
00:00:17,119 --> 00:00:18,640
jump straight into the problem we're

13
00:00:18,640 --> 00:00:19,520
going to solve

14
00:00:19,520 --> 00:00:21,439
you'll learn how to build a model that

15
00:00:21,439 --> 00:00:23,439
can learn and predict the kind of music

16
00:00:23,439 --> 00:00:24,640
people like

17
00:00:24,640 --> 00:00:26,640
so by the end of this one hour tutorial

18
00:00:26,640 --> 00:00:28,000
you will have a good understanding of

19
00:00:28,000 --> 00:00:29,359
machine learning basics

20
00:00:29,359 --> 00:00:30,880
and you'll be able to learn more

21
00:00:30,880 --> 00:00:33,120
intermediate to advanced level concepts

22
00:00:33,120 --> 00:00:34,399
you don't need any prior knowledge in

23
00:00:34,399 --> 00:00:35,920
machine learning but you need to know

24
00:00:35,920 --> 00:00:37,200
python fairly well

25
00:00:37,200 --> 00:00:38,640
if you don't i've got a couple of

26
00:00:38,640 --> 00:00:40,399
tutorials for you here on my channel the

27
00:00:40,399 --> 00:00:42,079
links are below this video

28
00:00:42,079 --> 00:00:43,840
i'm ashamed only and i'm super excited

29
00:00:43,840 --> 00:00:45,840
to be your instructor on this channel i

30
00:00:45,840 --> 00:00:47,600
have tons of programming tutorials that

31
00:00:47,600 --> 00:00:48,879
you might find helpful

32
00:00:48,879 --> 00:00:51,120
so be sure to subscribe as i upload new

33
00:00:51,120 --> 00:00:52,399
tutorials every week

34
00:00:52,399 --> 00:00:59,840
now let's jump in and get started

35
00:01:03,840 --> 00:01:04,959
in this section you're going to learn

36
00:01:04,959 --> 00:01:06,799
about machine learning which is a subset

37
00:01:06,799 --> 00:01:07,680
of ai or

38
00:01:07,680 --> 00:01:09,760
artificial intelligence it's one of the

39
00:01:09,760 --> 00:01:11,840
trending topics in the world these days

40
00:01:11,840 --> 00:01:13,119
and it's going to have a lot of

41
00:01:13,119 --> 00:01:14,560
applications in the future

42
00:01:14,560 --> 00:01:16,720
here's an example imagine i ask you to

43
00:01:16,720 --> 00:01:17,600
write a program

44
00:01:17,600 --> 00:01:20,320
to scan an image and tell if it's a cat

45
00:01:20,320 --> 00:01:21,439
or a doc

46
00:01:21,439 --> 00:01:22,960
if you want to build this program using

47
00:01:22,960 --> 00:01:24,720
traditional programming techniques

48
00:01:24,720 --> 00:01:26,560
your program is going to get overly

49
00:01:26,560 --> 00:01:28,479
complex you will have to come up with

50
00:01:28,479 --> 00:01:30,320
lots of rules to look for specific

51
00:01:30,320 --> 00:01:31,040
curves

52
00:01:31,040 --> 00:01:33,600
edges and colors in an image to tell if

53
00:01:33,600 --> 00:01:35,040
it's a cat or a dog

54
00:01:35,040 --> 00:01:36,479
but if i give you a black and white

55
00:01:36,479 --> 00:01:38,079
photo your rules may not work

56
00:01:38,079 --> 00:01:39,520
they may break then you'll have to

57
00:01:39,520 --> 00:01:41,360
rewrite them or i might give you a

58
00:01:41,360 --> 00:01:42,720
picture of a cat or a dog

59
00:01:42,720 --> 00:01:44,560
from a different angle that you did not

60
00:01:44,560 --> 00:01:45,759
predict before

61
00:01:45,759 --> 00:01:47,280
so solving this problem using

62
00:01:47,280 --> 00:01:48,799
traditional programming techniques is

63
00:01:48,799 --> 00:01:49,439
going to get

64
00:01:49,439 --> 00:01:52,479
overly complex or sometimes impossible

65
00:01:52,479 --> 00:01:54,399
now to make the matter worse what if in

66
00:01:54,399 --> 00:01:56,159
the future i ask you to extend this

67
00:01:56,159 --> 00:01:56,719
program

68
00:01:56,719 --> 00:01:58,560
such that it supports three kinds of

69
00:01:58,560 --> 00:02:00,240
animals cats

70
00:02:00,240 --> 00:02:02,560
dogs and horses once again you'll have

71
00:02:02,560 --> 00:02:04,320
to rewrite all those rules

72
00:02:04,320 --> 00:02:06,320
that's not gonna work so machine

73
00:02:06,320 --> 00:02:08,239
learning is a technique to solve these

74
00:02:08,239 --> 00:02:09,199
kind of problems

75
00:02:09,199 --> 00:02:11,440
and this is how it works we build a

76
00:02:11,440 --> 00:02:12,879
model or an engine

77
00:02:12,879 --> 00:02:15,280
and give it lots and lots of data for

78
00:02:15,280 --> 00:02:16,239
example we give you

79
00:02:16,239 --> 00:02:18,160
thousands or tens of thousands of

80
00:02:18,160 --> 00:02:20,160
pictures of cats and dogs

81
00:02:20,160 --> 00:02:22,160
our model will then find and learn

82
00:02:22,160 --> 00:02:24,080
patterns in the input data

83
00:02:24,080 --> 00:02:26,080
so we can give it a new picture of a cat

84
00:02:26,080 --> 00:02:27,599
that it hasn't seen before

85
00:02:27,599 --> 00:02:29,520
and ask it is it a cat or a dog or a

86
00:02:29,520 --> 00:02:31,360
horse and it will tell us with a certain

87
00:02:31,360 --> 00:02:32,800
level of accuracy

88
00:02:32,800 --> 00:02:34,879
the more input data we give it the more

89
00:02:34,879 --> 00:02:36,000
accurate our model

90
00:02:36,000 --> 00:02:38,480
is going to be so that was a very basic

91
00:02:38,480 --> 00:02:39,200
example

92
00:02:39,200 --> 00:02:40,560
but machine learning has other

93
00:02:40,560 --> 00:02:43,040
applications in self-driving cars

94
00:02:43,040 --> 00:02:45,920
robotics language processing vision

95
00:02:45,920 --> 00:02:46,879
processing

96
00:02:46,879 --> 00:02:48,879
forecasting things like stock market

97
00:02:48,879 --> 00:02:50,319
trends and the weather

98
00:02:50,319 --> 00:02:52,800
games and so on so that's the basic idea

99
00:02:52,800 --> 00:02:54,080
about machine learning

100
00:02:54,080 --> 00:02:55,599
next we'll look at machine learning in

101
00:02:55,599 --> 00:02:58,000
action

102
00:03:02,159 --> 00:03:03,680
a machine learning project involves a

103
00:03:03,680 --> 00:03:06,000
number of steps the first step is to

104
00:03:06,000 --> 00:03:08,159
import our data which often comes in the

105
00:03:08,159 --> 00:03:09,599
form of a csv file

106
00:03:09,599 --> 00:03:11,440
you might have a database with lots of

107
00:03:11,440 --> 00:03:13,840
data we can simply export that data

108
00:03:13,840 --> 00:03:15,760
and store it in a csv file for the

109
00:03:15,760 --> 00:03:18,000
purpose of our machine learning project

110
00:03:18,000 --> 00:03:20,239
so we import our data next we need to

111
00:03:20,239 --> 00:03:22,080
clean it and this involves tasks

112
00:03:22,080 --> 00:03:24,239
such as removing duplicated data if you

113
00:03:24,239 --> 00:03:25,519
have duplicates in the data

114
00:03:25,519 --> 00:03:27,360
we don't want to feed this to our model

115
00:03:27,360 --> 00:03:29,120
because otherwise our model will learn

116
00:03:29,120 --> 00:03:30,720
bad patterns in the data and it will

117
00:03:30,720 --> 00:03:32,480
produce the wrong result

118
00:03:32,480 --> 00:03:34,000
so we should make sure that our input

119
00:03:34,000 --> 00:03:36,080
data is in a good and clean shape

120
00:03:36,080 --> 00:03:37,760
if there are data that is irrelevant we

121
00:03:37,760 --> 00:03:39,120
should remove them if they are

122
00:03:39,120 --> 00:03:40,400
duplicated or

123
00:03:40,400 --> 00:03:43,200
incomplete we can remove or modify them

124
00:03:43,200 --> 00:03:44,879
if our data is text-based

125
00:03:44,879 --> 00:03:47,440
like the name of countries or genres of

126
00:03:47,440 --> 00:03:47,920
music

127
00:03:47,920 --> 00:03:50,319
or cats and dogs we need to convert them

128
00:03:50,319 --> 00:03:52,000
to numerical values

129
00:03:52,000 --> 00:03:53,840
so this step really depends on the kind

130
00:03:53,840 --> 00:03:55,519
of data we're working with

131
00:03:55,519 --> 00:03:57,680
every project is different now that we

132
00:03:57,680 --> 00:03:59,599
have a clean data set we need to split

133
00:03:59,599 --> 00:04:00,080
it into

134
00:04:00,080 --> 00:04:02,959
two segments one for training our model

135
00:04:02,959 --> 00:04:04,560
and the other for testing it

136
00:04:04,560 --> 00:04:06,959
to make sure that our model produces the

137
00:04:06,959 --> 00:04:08,239
right result

138
00:04:08,239 --> 00:04:09,760
for example if you have a thousand

139
00:04:09,760 --> 00:04:11,280
pictures of cats and dogs

140
00:04:11,280 --> 00:04:12,959
we can reserve eighty percent for

141
00:04:12,959 --> 00:04:14,879
training and the other 20

142
00:04:14,879 --> 00:04:17,519
for testing the next step is to create a

143
00:04:17,519 --> 00:04:18,238
model

144
00:04:18,238 --> 00:04:20,478
and this involves selecting an algorithm

145
00:04:20,478 --> 00:04:22,079
to analyze the data

146
00:04:22,079 --> 00:04:23,360
there are so many different machine

147
00:04:23,360 --> 00:04:25,120
learning algorithms out there such as

148
00:04:25,120 --> 00:04:26,240
decision trees

149
00:04:26,240 --> 00:04:28,720
neural networks and so on each algorithm

150
00:04:28,720 --> 00:04:30,160
has pros and cons

151
00:04:30,160 --> 00:04:32,560
in terms of accuracy and performance so

152
00:04:32,560 --> 00:04:33,840
the algorithm you choose

153
00:04:33,840 --> 00:04:35,440
depends on the kind of problem you're

154
00:04:35,440 --> 00:04:37,840
trying to solve and your input data

155
00:04:37,840 --> 00:04:39,199
now the good news is that we don't have

156
00:04:39,199 --> 00:04:41,120
to explicitly program an

157
00:04:41,120 --> 00:04:43,120
algorithm there are libraries out there

158
00:04:43,120 --> 00:04:44,800
that provide these algorithms

159
00:04:44,800 --> 00:04:46,479
one of the most popular ones which we

160
00:04:46,479 --> 00:04:48,080
are going to look at in this tutorial

161
00:04:48,080 --> 00:04:50,880
is scikit-learn so we build a model

162
00:04:50,880 --> 00:04:52,320
using an algorithm

163
00:04:52,320 --> 00:04:54,800
next we need to train our model so we

164
00:04:54,800 --> 00:04:56,639
fitted our training data

165
00:04:56,639 --> 00:04:58,000
our model will then look for the

166
00:04:58,000 --> 00:05:00,560
patterns in the data so next we can ask

167
00:05:00,560 --> 00:05:02,240
it to make predictions

168
00:05:02,240 --> 00:05:04,000
back to our example of cats and dogs we

169
00:05:04,000 --> 00:05:05,360
can ask our model

170
00:05:05,360 --> 00:05:07,759
is this a cat or a dog and our model

171
00:05:07,759 --> 00:05:09,440
will make a prediction

172
00:05:09,440 --> 00:05:11,120
now the prediction is not always

173
00:05:11,120 --> 00:05:13,199
accurate in fact when you start out

174
00:05:13,199 --> 00:05:14,880
it's very likely that your predictions

175
00:05:14,880 --> 00:05:17,039
are inaccurate so we need to evaluate

176
00:05:17,039 --> 00:05:18,639
the predictions and measure

177
00:05:18,639 --> 00:05:20,960
their accuracy then we need to get back

178
00:05:20,960 --> 00:05:21,919
to our model

179
00:05:21,919 --> 00:05:24,160
and either select a different algorithm

180
00:05:24,160 --> 00:05:25,360
that is going to produce

181
00:05:25,360 --> 00:05:27,199
a more accurate result for the kind of

182
00:05:27,199 --> 00:05:28,880
problem we're trying to solve

183
00:05:28,880 --> 00:05:32,080
or fine-tune the parameters of our model

184
00:05:32,080 --> 00:05:34,000
so each algorithm has parameters that we

185
00:05:34,000 --> 00:05:37,199
can modify to optimize the accuracy

186
00:05:37,199 --> 00:05:38,639
so these are the high level steps that

187
00:05:38,639 --> 00:05:41,039
you follow in a machine learning project

188
00:05:41,039 --> 00:05:42,560
next we'll look at the libraries and

189
00:05:42,560 --> 00:05:45,759
tools for machine learning

190
00:05:50,160 --> 00:05:51,199
in this lecture we're going to look at

191
00:05:51,199 --> 00:05:53,520
the popular python libraries that we use

192
00:05:53,520 --> 00:05:55,120
in machine learning projects

193
00:05:55,120 --> 00:05:57,199
the first one is numpy which provides a

194
00:05:57,199 --> 00:05:58,800
multi-dimensional array

195
00:05:58,800 --> 00:06:01,520
very very popular library the second one

196
00:06:01,520 --> 00:06:03,680
is pandas which is a data analysis

197
00:06:03,680 --> 00:06:05,840
library that provides a concept called

198
00:06:05,840 --> 00:06:06,800
data frame

199
00:06:06,800 --> 00:06:08,880
a data frame is a two-dimensional data

200
00:06:08,880 --> 00:06:10,639
structure similar to an excel

201
00:06:10,639 --> 00:06:11,600
spreadsheet

202
00:06:11,600 --> 00:06:13,600
so we have rows and columns we can

203
00:06:13,600 --> 00:06:15,759
select data in a row or a column

204
00:06:15,759 --> 00:06:18,319
or a range of rows and columns again

205
00:06:18,319 --> 00:06:20,160
very very popular in machine learning

206
00:06:20,160 --> 00:06:22,560
and data science projects the third

207
00:06:22,560 --> 00:06:23,199
library

208
00:06:23,199 --> 00:06:25,840
is matplotlib which is a two-dimensional

209
00:06:25,840 --> 00:06:26,880
plotting library

210
00:06:26,880 --> 00:06:29,280
for creating graphs and plots the next

211
00:06:29,280 --> 00:06:31,199
library is scikit-learn which is one of

212
00:06:31,199 --> 00:06:32,800
the most popular machine learning

213
00:06:32,800 --> 00:06:33,520
libraries

214
00:06:33,520 --> 00:06:35,039
that provides all these common

215
00:06:35,039 --> 00:06:37,120
algorithms like decision trees

216
00:06:37,120 --> 00:06:40,240
neural networks and so on now when

217
00:06:40,240 --> 00:06:41,919
working with machine learning projects

218
00:06:41,919 --> 00:06:43,840
we use an environment called jupiter for

219
00:06:43,840 --> 00:06:45,120
writing our code

220
00:06:45,120 --> 00:06:46,960
technically we can still use vs code or

221
00:06:46,960 --> 00:06:48,160
any other code editors

222
00:06:48,160 --> 00:06:49,919
but these editors are not ideal for

223
00:06:49,919 --> 00:06:51,199
machine learning projects

224
00:06:51,199 --> 00:06:52,880
because we frequently need to inspect

225
00:06:52,880 --> 00:06:54,720
the data and that is really hard

226
00:06:54,720 --> 00:06:56,479
in environments like vs code and

227
00:06:56,479 --> 00:06:58,479
terminal if you're working with a table

228
00:06:58,479 --> 00:07:00,080
of 10 or 20 columns

229
00:07:00,080 --> 00:07:01,759
visualizing this data in a terminal

230
00:07:01,759 --> 00:07:03,440
window is really really difficult and

231
00:07:03,440 --> 00:07:04,240
messy

232
00:07:04,240 --> 00:07:06,319
so that's why we use jupiter it makes it

233
00:07:06,319 --> 00:07:08,880
really easy to inspect our data

234
00:07:08,880 --> 00:07:10,400
now to install jupyter we're going to

235
00:07:10,400 --> 00:07:13,039
use a platform called anaconda

236
00:07:13,039 --> 00:07:16,400
so head over to anaconda.com

237
00:07:16,400 --> 00:07:18,720
download on this page you can download

238
00:07:18,720 --> 00:07:20,720
anaconda distribution for your operating

239
00:07:20,720 --> 00:07:21,520
system

240
00:07:21,520 --> 00:07:24,639
so we have distributions for windows mac

241
00:07:24,639 --> 00:07:28,160
and linux so let's go ahead and

242
00:07:28,160 --> 00:07:32,400
install anaconda for python 3.7

243
00:07:32,400 --> 00:07:34,960
download

244
00:07:36,560 --> 00:07:38,319
all right so here's anaconda downloaded

245
00:07:38,319 --> 00:07:41,520
on my machine let's double click this

246
00:07:41,520 --> 00:07:42,720
all right first it's going to run a

247
00:07:42,720 --> 00:07:44,479
program to determine if the software can

248
00:07:44,479 --> 00:07:45,520
be installed

249
00:07:45,520 --> 00:07:48,240
so let's continue and once again

250
00:07:48,240 --> 00:07:49,199
continue

251
00:07:49,199 --> 00:07:51,680
continue pretty easy continue one more

252
00:07:51,680 --> 00:07:52,400
time

253
00:07:52,400 --> 00:07:55,840
i agree with the license agreement okay

254
00:07:55,840 --> 00:07:57,440
you can use the default installation

255
00:07:57,440 --> 00:07:59,280
location so don't worry about that

256
00:07:59,280 --> 00:08:02,400
just click install give it a few seconds

257
00:08:02,400 --> 00:08:04,240
now the beautiful thing about anaconda

258
00:08:04,240 --> 00:08:06,080
is that it will install jupyter

259
00:08:06,080 --> 00:08:08,319
as well as all those popular data

260
00:08:08,319 --> 00:08:10,160
science libraries like numpy

261
00:08:10,160 --> 00:08:11,919
pandas and so on so we don't have to

262
00:08:11,919 --> 00:08:15,520
manually install this using pip

263
00:08:16,160 --> 00:08:17,520
all right now as part of the next step

264
00:08:17,520 --> 00:08:19,440
anaconda is suggesting to install

265
00:08:19,440 --> 00:08:21,520
microsoft vs code we already have this

266
00:08:21,520 --> 00:08:22,479
on our machine so

267
00:08:22,479 --> 00:08:24,160
we don't have to install it we can go

268
00:08:24,160 --> 00:08:26,319
with continue and

269
00:08:26,319 --> 00:08:28,479
close the installation now finally we

270
00:08:28,479 --> 00:08:30,240
can move this to trash because we don't

271
00:08:30,240 --> 00:08:33,599
need this installer in the future

272
00:08:33,599 --> 00:08:35,760
all right now open up a terminal window

273
00:08:35,760 --> 00:08:36,719
and type

274
00:08:36,719 --> 00:08:40,719
jupyter with a y space

275
00:08:40,719 --> 00:08:43,440
notebook this will start the notebook

276
00:08:43,440 --> 00:08:44,640
server on your machine

277
00:08:44,640 --> 00:08:48,080
so enter there you go this will start

278
00:08:48,080 --> 00:08:49,600
the notebook server on your machine you

279
00:08:49,600 --> 00:08:51,440
can see these default messages here

280
00:08:51,440 --> 00:08:53,120
don't worry about them now it

281
00:08:53,120 --> 00:08:55,839
automatically opens a browser window

282
00:08:55,839 --> 00:09:00,399
pointing to localhost port 888

283
00:09:00,399 --> 00:09:02,800
this is what we call jupiter dashboard

284
00:09:02,800 --> 00:09:04,399
on this dashboard we have a few tabs the

285
00:09:04,399 --> 00:09:05,120
first tab

286
00:09:05,120 --> 00:09:07,600
is the files tab and by default this

287
00:09:07,600 --> 00:09:09,519
points to your home directory

288
00:09:09,519 --> 00:09:11,200
so every user on your machine has a home

289
00:09:11,200 --> 00:09:13,200
directory this is my home directory on

290
00:09:13,200 --> 00:09:13,600
mac

291
00:09:13,600 --> 00:09:15,440
you can see here we have a desktop

292
00:09:15,440 --> 00:09:17,200
folder as well as documents

293
00:09:17,200 --> 00:09:18,800
downloads and so on on your machine

294
00:09:18,800 --> 00:09:20,480
you're going to see different folders

295
00:09:20,480 --> 00:09:21,760
so someone on your machine you need to

296
00:09:21,760 --> 00:09:23,839
create a jupyter notebook

297
00:09:23,839 --> 00:09:26,080
i'm going to go to desktop here's my

298
00:09:26,080 --> 00:09:28,000
desktop i don't have anything here

299
00:09:28,000 --> 00:09:31,760
and then click new i want to create a

300
00:09:31,760 --> 00:09:32,399
notebook

301
00:09:32,399 --> 00:09:34,720
for python 3. in this notebook we can

302
00:09:34,720 --> 00:09:35,839
write python code

303
00:09:35,839 --> 00:09:37,760
and execute it line by line we can

304
00:09:37,760 --> 00:09:39,600
easily visualize our data as you will

305
00:09:39,600 --> 00:09:41,519
see over the next few videos

306
00:09:41,519 --> 00:09:44,880
so let's go ahead with this

307
00:09:45,120 --> 00:09:47,200
all right here's our first notebook you

308
00:09:47,200 --> 00:09:48,720
can see by default it's called

309
00:09:48,720 --> 00:09:52,160
untitled let's change that to hello

310
00:09:52,160 --> 00:09:52,720
world

311
00:09:52,720 --> 00:09:54,320
so this is going to be the hello world

312
00:09:54,320 --> 00:09:56,640
of our machine learning project

313
00:09:56,640 --> 00:09:59,519
let's rename this now if you look at

314
00:09:59,519 --> 00:10:01,480
your desktop you can see this file

315
00:10:01,480 --> 00:10:02,640
helloworld.i

316
00:10:02,640 --> 00:10:06,399
pi nb this is a jupiter notebook

317
00:10:06,399 --> 00:10:08,240
it's kind of similar to our pi files

318
00:10:08,240 --> 00:10:09,920
where we write our python code

319
00:10:09,920 --> 00:10:11,680
but it includes additional data that

320
00:10:11,680 --> 00:10:15,040
jupiter uses to execute our code

321
00:10:15,040 --> 00:10:18,079
so back to our notebook let's do a

322
00:10:18,079 --> 00:10:22,480
print hello world and then

323
00:10:22,480 --> 00:10:25,600
click this run button here and

324
00:10:25,600 --> 00:10:28,160
here's the result printed in jupyter so

325
00:10:28,160 --> 00:10:29,839
we don't have to navigate back and forth

326
00:10:29,839 --> 00:10:31,360
between the terminal window

327
00:10:31,360 --> 00:10:34,320
we can see all the result right here

328
00:10:34,320 --> 00:10:36,000
next i'm going to show you how to load a

329
00:10:36,000 --> 00:10:40,320
data set from a csv file in jupyter

330
00:10:44,800 --> 00:10:46,000
all right in this lecture we're going to

331
00:10:46,000 --> 00:10:48,320
download a data set from a very popular

332
00:10:48,320 --> 00:10:49,480
website called

333
00:10:49,480 --> 00:10:52,160
kaggle.com gaggle is basically a place

334
00:10:52,160 --> 00:10:54,000
to do data science projects

335
00:10:54,000 --> 00:10:55,360
so the first thing you need to do is to

336
00:10:55,360 --> 00:10:57,200
create an account you can sign up with

337
00:10:57,200 --> 00:10:59,760
facebook google or using a custom email

338
00:10:59,760 --> 00:11:00,800
and password

339
00:11:00,800 --> 00:11:02,800
once you sign up then come back here on

340
00:11:02,800 --> 00:11:04,000
kaggle.com

341
00:11:04,000 --> 00:11:07,040
here in the search bar search for

342
00:11:07,040 --> 00:11:10,480
video game sales this is the name of a

343
00:11:10,480 --> 00:11:12,160
very popular data set that we're going

344
00:11:12,160 --> 00:11:13,600
to use in this lecture

345
00:11:13,600 --> 00:11:15,920
so here in this list you can see the

346
00:11:15,920 --> 00:11:16,959
first item

347
00:11:16,959 --> 00:11:19,519
with this kind of reddish icon so let's

348
00:11:19,519 --> 00:11:21,120
go with that

349
00:11:21,120 --> 00:11:22,800
as you can see this data set includes

350
00:11:22,800 --> 00:11:25,120
the sales data for more than 16

351
00:11:25,120 --> 00:11:27,760
000 video games on this page you can see

352
00:11:27,760 --> 00:11:28,720
the description

353
00:11:28,720 --> 00:11:30,640
of various columns in this data set we

354
00:11:30,640 --> 00:11:32,240
have rank

355
00:11:32,240 --> 00:11:35,600
name platform year and so on so here's

356
00:11:35,600 --> 00:11:38,279
our data source it's a csv file called

357
00:11:38,279 --> 00:11:39,760
vgsales.csv

358
00:11:39,760 --> 00:11:42,480
as you can see there are over 16 000

359
00:11:42,480 --> 00:11:43,200
rows

360
00:11:43,200 --> 00:11:46,160
and 11 columns in this data set right

361
00:11:46,160 --> 00:11:47,760
below that you can see the first few

362
00:11:47,760 --> 00:11:48,399
records

363
00:11:48,399 --> 00:11:50,399
of this data set so here's our first

364
00:11:50,399 --> 00:11:53,040
record the ranking for this game is one

365
00:11:53,040 --> 00:11:55,200
it's the wii sports game for we as the

366
00:11:55,200 --> 00:11:56,800
platform and it was released in year

367
00:11:56,800 --> 00:11:58,480
2006

368
00:11:58,480 --> 00:12:01,279
now what i want you to do is to go ahead

369
00:12:01,279 --> 00:12:01,920
and

370
00:12:01,920 --> 00:12:04,240
download this data set and as i told you

371
00:12:04,240 --> 00:12:05,920
before you need to sign in before you

372
00:12:05,920 --> 00:12:07,600
can download this

373
00:12:07,600 --> 00:12:09,200
so this will give you a zip file as you

374
00:12:09,200 --> 00:12:10,800
can see here

375
00:12:10,800 --> 00:12:13,279
here's our csv file now i want you to

376
00:12:13,279 --> 00:12:14,000
put this

377
00:12:14,000 --> 00:12:16,160
right next to your jupyter notebook on

378
00:12:16,160 --> 00:12:18,079
my machine that is on my desktop

379
00:12:18,079 --> 00:12:20,079
so i'm going to drag and drop this onto

380
00:12:20,079 --> 00:12:22,160
the desktop folder

381
00:12:22,160 --> 00:12:24,399
now if you look at the desktop you can

382
00:12:24,399 --> 00:12:25,440
see here is my

383
00:12:25,440 --> 00:12:28,079
jupyter hello world notebook and right

384
00:12:28,079 --> 00:12:30,200
next to that we have

385
00:12:30,200 --> 00:12:33,040
vgsales.csv with that

386
00:12:33,040 --> 00:12:35,360
we go back to our jupyter notebook let's

387
00:12:35,360 --> 00:12:36,480
remove the first line

388
00:12:36,480 --> 00:12:40,079
and instead import

389
00:12:40,079 --> 00:12:43,360
pandas as pd

390
00:12:43,360 --> 00:12:45,360
with this we're importing pandas module

391
00:12:45,360 --> 00:12:46,959
and renaming it to pd

392
00:12:46,959 --> 00:12:49,040
so we don't have to type pandas dot

393
00:12:49,040 --> 00:12:51,279
several times in this code

394
00:12:51,279 --> 00:12:54,480
now let's type pd dot read

395
00:12:54,480 --> 00:12:58,320
underline csv and pass the name of our

396
00:12:58,320 --> 00:12:59,519
csv file

397
00:12:59,519 --> 00:13:03,040
that is vg sales.csv now because this

398
00:13:03,040 --> 00:13:04,959
csv file is in the current folder

399
00:13:04,959 --> 00:13:06,720
right next to our jupyter notebook we

400
00:13:06,720 --> 00:13:08,320
can easily load it otherwise we'll have

401
00:13:08,320 --> 00:13:11,200
to supply the full path to this file

402
00:13:11,200 --> 00:13:14,959
so this returns a data frame object

403
00:13:14,959 --> 00:13:17,120
which is like an excel spreadsheet let

404
00:13:17,120 --> 00:13:18,800
me show you so

405
00:13:18,800 --> 00:13:21,360
we store it here and then we can simply

406
00:13:21,360 --> 00:13:21,920
type

407
00:13:21,920 --> 00:13:24,959
df to inspect it so one more time let's

408
00:13:24,959 --> 00:13:26,639
run this program

409
00:13:26,639 --> 00:13:28,240
here's our data frame with these rows

410
00:13:28,240 --> 00:13:30,639
and columns so we have rank

411
00:13:30,639 --> 00:13:33,360
name platform and so on now this data

412
00:13:33,360 --> 00:13:35,279
frame object has lots of attributes and

413
00:13:35,279 --> 00:13:35,839
methods

414
00:13:35,839 --> 00:13:37,279
that we're not going to cover in this

415
00:13:37,279 --> 00:13:38,959
tutorial that's really beyond the scope

416
00:13:38,959 --> 00:13:39,920
of what we're going to do

417
00:13:39,920 --> 00:13:41,440
so i'll leave it up to you to read

418
00:13:41,440 --> 00:13:43,519
panda's documentation or follow other

419
00:13:43,519 --> 00:13:45,440
tutorials to learn about pandas data

420
00:13:45,440 --> 00:13:46,000
frames

421
00:13:46,000 --> 00:13:47,120
but in this lecture i'm going to show

422
00:13:47,120 --> 00:13:49,120
you some of the most useful methods

423
00:13:49,120 --> 00:13:52,399
and attributes the first one is shape so

424
00:13:52,399 --> 00:13:55,120
shape let's run this one more time so

425
00:13:55,120 --> 00:13:56,959
here's the shape of this data set

426
00:13:56,959 --> 00:14:00,399
we have over 16 000 records and

427
00:14:00,399 --> 00:14:03,040
11 columns technically this is a two

428
00:14:03,040 --> 00:14:04,240
dimensional array

429
00:14:04,240 --> 00:14:07,839
of sixteen thousand and eleven okay

430
00:14:07,839 --> 00:14:10,079
now you can see here we have another

431
00:14:10,079 --> 00:14:11,600
segment for writing code so we don't

432
00:14:11,600 --> 00:14:13,199
have to write all the code in the first

433
00:14:13,199 --> 00:14:14,079
segment

434
00:14:14,079 --> 00:14:15,519
so here in the second segment we can

435
00:14:15,519 --> 00:14:17,360
call one of the methods of the data

436
00:14:17,360 --> 00:14:17,920
frame

437
00:14:17,920 --> 00:14:22,079
that is df dot describe

438
00:14:22,079 --> 00:14:25,360
now when we run this program we can see

439
00:14:25,360 --> 00:14:27,360
the output for each segment

440
00:14:27,360 --> 00:14:29,279
right next to it so here's our first

441
00:14:29,279 --> 00:14:30,480
segment here we have

442
00:14:30,480 --> 00:14:33,519
these three lines and this is the output

443
00:14:33,519 --> 00:14:36,160
of the last line below that we have our

444
00:14:36,160 --> 00:14:37,040
second segment

445
00:14:37,040 --> 00:14:38,800
here we're calling the describe method

446
00:14:38,800 --> 00:14:40,320
and right below that we have

447
00:14:40,320 --> 00:14:43,120
the output of this segment so this is

448
00:14:43,120 --> 00:14:44,480
the beauty of jupiter

449
00:14:44,480 --> 00:14:46,959
we can easily visualize our data doing

450
00:14:46,959 --> 00:14:48,720
this with vs code and terminal windows

451
00:14:48,720 --> 00:14:50,800
is really tedious and clunky

452
00:14:50,800 --> 00:14:52,240
so what is this describe method

453
00:14:52,240 --> 00:14:54,240
returning basically it's returning some

454
00:14:54,240 --> 00:14:56,480
basic information about each column

455
00:14:56,480 --> 00:14:58,560
in this data set so as you saw earlier

456
00:14:58,560 --> 00:15:00,399
we have columns like rank

457
00:15:00,399 --> 00:15:02,880
year and so on these are the columns

458
00:15:02,880 --> 00:15:04,399
with numerical values

459
00:15:04,399 --> 00:15:07,040
now for each column we have the count

460
00:15:07,040 --> 00:15:08,560
which is the number of records in that

461
00:15:08,560 --> 00:15:09,120
column

462
00:15:09,120 --> 00:15:12,760
you can see our rank column has 16

463
00:15:12,760 --> 00:15:16,240
598 records whereas the year column has

464
00:15:16,240 --> 00:15:19,760
16 327 records

465
00:15:19,760 --> 00:15:21,600
so this shows that some of our records

466
00:15:21,600 --> 00:15:24,320
don't have the value for the year column

467
00:15:24,320 --> 00:15:26,720
we have no values so in a real data

468
00:15:26,720 --> 00:15:27,360
science or

469
00:15:27,360 --> 00:15:28,800
machine learning project we'll have to

470
00:15:28,800 --> 00:15:30,560
use some techniques to clean up our data

471
00:15:30,560 --> 00:15:31,199
set

472
00:15:31,199 --> 00:15:33,279
one option is to remove the records that

473
00:15:33,279 --> 00:15:35,600
don't have a value for the year column

474
00:15:35,600 --> 00:15:38,160
or we can assign them a default value

475
00:15:38,160 --> 00:15:40,240
that really depends on the project

476
00:15:40,240 --> 00:15:42,480
now another attribute for each column is

477
00:15:42,480 --> 00:15:44,079
mean so this is the average

478
00:15:44,079 --> 00:15:46,240
of all the values now in the case of the

479
00:15:46,240 --> 00:15:48,240
rank column this value doesn't really

480
00:15:48,240 --> 00:15:48,800
matter

481
00:15:48,800 --> 00:15:51,759
but look at the year so the average year

482
00:15:51,759 --> 00:15:53,279
for all these video games in our data

483
00:15:53,279 --> 00:15:53,680
set

484
00:15:53,680 --> 00:15:56,000
is 2006 and this might be important in

485
00:15:56,000 --> 00:15:57,839
the problem we're trying to solve

486
00:15:57,839 --> 00:16:00,639
we also have standard deviation which is

487
00:16:00,639 --> 00:16:01,360
a measure

488
00:16:01,360 --> 00:16:03,759
to quantify the amount of variation in

489
00:16:03,759 --> 00:16:05,199
our set of values

490
00:16:05,199 --> 00:16:08,160
below that we have min as an example the

491
00:16:08,160 --> 00:16:10,160
minimum value for the year column

492
00:16:10,160 --> 00:16:13,279
is 1980. so quite often when we work

493
00:16:13,279 --> 00:16:14,399
with a new data set

494
00:16:14,399 --> 00:16:16,480
we call the describe method to get some

495
00:16:16,480 --> 00:16:18,959
basic statistics about our data

496
00:16:18,959 --> 00:16:21,279
let me show you another useful attribute

497
00:16:21,279 --> 00:16:24,680
so in the next segment let's type

498
00:16:24,680 --> 00:16:28,399
df.values let's run this

499
00:16:28,399 --> 00:16:29,839
as you can see this returns a

500
00:16:29,839 --> 00:16:31,839
two-dimensional array this square

501
00:16:31,839 --> 00:16:32,880
bracket indicates

502
00:16:32,880 --> 00:16:36,160
the outer array and the second one

503
00:16:36,160 --> 00:16:38,639
represents the inner array so the first

504
00:16:38,639 --> 00:16:39,360
element

505
00:16:39,360 --> 00:16:42,800
in our outer array is an array itself

506
00:16:42,800 --> 00:16:45,199
these are the values in this array which

507
00:16:45,199 --> 00:16:47,120
basically represent the first row

508
00:16:47,120 --> 00:16:49,360
in our data set so the video game with

509
00:16:49,360 --> 00:16:50,320
ranking 1

510
00:16:50,320 --> 00:16:53,279
which is called wii sports so this was a

511
00:16:53,279 --> 00:16:53,759
basic

512
00:16:53,759 --> 00:16:56,160
overview of pando's data frames in the

513
00:16:56,160 --> 00:16:57,519
next lecture i'm going to show you some

514
00:16:57,519 --> 00:17:05,839
of the useful shortcuts of jupyter

515
00:17:06,000 --> 00:17:07,199
in this lecture i'm going to show you

516
00:17:07,199 --> 00:17:09,199
some of the most useful shortcuts in

517
00:17:09,199 --> 00:17:10,319
jupyter

518
00:17:10,319 --> 00:17:11,599
now the first thing i want you to pay

519
00:17:11,599 --> 00:17:13,679
attention to is this green bar

520
00:17:13,679 --> 00:17:16,000
on the left this indicates that this

521
00:17:16,000 --> 00:17:18,319
cell is currently in the edit mode so

522
00:17:18,319 --> 00:17:21,919
we can write code here now if we press

523
00:17:21,919 --> 00:17:25,199
the escape key green turns to blue and

524
00:17:25,199 --> 00:17:27,039
that means this cell is currently in the

525
00:17:27,039 --> 00:17:28,240
command mode

526
00:17:28,240 --> 00:17:30,559
so basically the activated cell can be

527
00:17:30,559 --> 00:17:32,400
either in the edit mode or

528
00:17:32,400 --> 00:17:34,720
the command mode depending on the mode

529
00:17:34,720 --> 00:17:36,640
we have different shortcuts

530
00:17:36,640 --> 00:17:38,080
so here we're currently in the command

531
00:17:38,080 --> 00:17:40,000
mode if we press

532
00:17:40,000 --> 00:17:42,799
h we can see the list of all the

533
00:17:42,799 --> 00:17:43,600
keyboard

534
00:17:43,600 --> 00:17:46,720
shortcuts right above this list you can

535
00:17:46,720 --> 00:17:48,000
see

536
00:17:48,000 --> 00:17:51,039
mac os modifier keys these are the extra

537
00:17:51,039 --> 00:17:53,200
keys that we have on a mac keyboard

538
00:17:53,200 --> 00:17:54,799
if you're a windows user you're not

539
00:17:54,799 --> 00:17:57,440
going to see this so as an example here

540
00:17:57,440 --> 00:18:00,400
is the shape of the command key this is

541
00:18:00,400 --> 00:18:01,520
control this is

542
00:18:01,520 --> 00:18:04,240
option and so on with this guideline you

543
00:18:04,240 --> 00:18:06,080
can easily understand the shortcut

544
00:18:06,080 --> 00:18:07,679
associated with each command

545
00:18:07,679 --> 00:18:10,720
let me show you so here we have all the

546
00:18:10,720 --> 00:18:11,520
commands

547
00:18:11,520 --> 00:18:13,600
when a cell is in the command mode for

548
00:18:13,600 --> 00:18:15,679
example we have this command

549
00:18:15,679 --> 00:18:18,240
open the command palette this is exactly

550
00:18:18,240 --> 00:18:20,000
like the command palette that we have in

551
00:18:20,000 --> 00:18:21,120
vs code

552
00:18:21,120 --> 00:18:23,200
here's a shortcut to execute this

553
00:18:23,200 --> 00:18:24,640
command that is

554
00:18:24,640 --> 00:18:29,200
command shift and f okay so here we have

555
00:18:29,200 --> 00:18:31,200
lots of shortcuts of course you're not

556
00:18:31,200 --> 00:18:32,880
going to use all of them all the time

557
00:18:32,880 --> 00:18:34,320
but it's good to have a quick look here

558
00:18:34,320 --> 00:18:36,160
to see what is available for you

559
00:18:36,160 --> 00:18:37,679
with this shortcuts you can write code

560
00:18:37,679 --> 00:18:39,679
much faster so let me show you some of

561
00:18:39,679 --> 00:18:41,600
the most useful ones

562
00:18:41,600 --> 00:18:44,799
i'm going to close this now with our

563
00:18:44,799 --> 00:18:45,840
first cell

564
00:18:45,840 --> 00:18:49,360
in the command mode i'm going to press b

565
00:18:49,360 --> 00:18:52,240
and this inserts a new cell below this

566
00:18:52,240 --> 00:18:53,600
cell

567
00:18:53,600 --> 00:18:55,679
we can also go back to our first cell

568
00:18:55,679 --> 00:18:57,200
press escape

569
00:18:57,200 --> 00:18:59,120
now the cell is in the command mode we

570
00:18:59,120 --> 00:19:00,880
can insert an empty cell

571
00:19:00,880 --> 00:19:03,919
above this cell by pressing a

572
00:19:03,919 --> 00:19:06,960
so either a or b a for above and b

573
00:19:06,960 --> 00:19:09,280
for below okay now if you don't want

574
00:19:09,280 --> 00:19:10,400
this cell you can press

575
00:19:10,400 --> 00:19:14,320
d twice to delete it like this

576
00:19:14,320 --> 00:19:15,840
now in the cell i'm going to print a

577
00:19:15,840 --> 00:19:18,400
hello world message so

578
00:19:18,400 --> 00:19:22,000
print hello world now

579
00:19:22,000 --> 00:19:24,080
to run the code in this cell we can

580
00:19:24,080 --> 00:19:27,200
click on the run button here

581
00:19:27,200 --> 00:19:30,240
so here's our print function and right

582
00:19:30,240 --> 00:19:31,760
below that you can see

583
00:19:31,760 --> 00:19:34,480
the output of this function but note

584
00:19:34,480 --> 00:19:35,600
that when you run a cell

585
00:19:35,600 --> 00:19:38,400
this will only execute the code in that

586
00:19:38,400 --> 00:19:38,960
cell

587
00:19:38,960 --> 00:19:41,280
in other words the code in other cells

588
00:19:41,280 --> 00:19:43,200
will not be executed let me show you

589
00:19:43,200 --> 00:19:44,000
what i mean

590
00:19:44,000 --> 00:19:46,320
so in the cell below this cell i'm going

591
00:19:46,320 --> 00:19:47,440
to delete the call

592
00:19:47,440 --> 00:19:50,160
to describe method instead i'm going to

593
00:19:50,160 --> 00:19:51,520
print

594
00:19:51,520 --> 00:19:55,679
ocean now i'm going to put the cursor

595
00:19:55,679 --> 00:19:57,919
back in this cell where we print the

596
00:19:57,919 --> 00:19:59,360
hello world message

597
00:19:59,360 --> 00:20:02,559
and run this cell so you can see hello

598
00:20:02,559 --> 00:20:02,960
world

599
00:20:02,960 --> 00:20:05,600
is displayed here but the cell below is

600
00:20:05,600 --> 00:20:06,720
still displaying

601
00:20:06,720 --> 00:20:09,039
the described table so we don't see the

602
00:20:09,039 --> 00:20:10,559
changes here

603
00:20:10,559 --> 00:20:13,200
now to solve this problem we can go to

604
00:20:13,200 --> 00:20:14,799
the cell menu on the top

605
00:20:14,799 --> 00:20:18,159
and run all cells together

606
00:20:18,159 --> 00:20:20,240
this can work for small projects but

607
00:20:20,240 --> 00:20:21,760
sometimes you're working with a large

608
00:20:21,760 --> 00:20:22,480
data set

609
00:20:22,480 --> 00:20:24,080
so if you want to run all these cells

610
00:20:24,080 --> 00:20:25,840
together it's going to take a lot of

611
00:20:25,840 --> 00:20:26,400
time

612
00:20:26,400 --> 00:20:28,880
that is the reason jupiter saves the

613
00:20:28,880 --> 00:20:30,480
output of itself so we don't have to

614
00:20:30,480 --> 00:20:31,600
rerun that code

615
00:20:31,600 --> 00:20:34,240
if it hasn't changed so this notebook

616
00:20:34,240 --> 00:20:35,600
file that we have here

617
00:20:35,600 --> 00:20:38,080
includes our source code organized in

618
00:20:38,080 --> 00:20:38,720
cells

619
00:20:38,720 --> 00:20:40,960
as well as the output for each cell that

620
00:20:40,960 --> 00:20:42,080
is why it's different

621
00:20:42,080 --> 00:20:44,400
from a regular pi file where we only

622
00:20:44,400 --> 00:20:46,320
have the source code

623
00:20:46,320 --> 00:20:48,880
here we also have autocompletion and

624
00:20:48,880 --> 00:20:49,919
intellisense

625
00:20:49,919 --> 00:20:52,960
so in the cell let's call

626
00:20:52,960 --> 00:20:56,000
df dataframe dot

627
00:20:56,000 --> 00:20:58,400
now if you press tab we can see all the

628
00:20:58,400 --> 00:21:00,080
attributes and methods

629
00:21:00,080 --> 00:21:03,280
in this object so let's call

630
00:21:03,280 --> 00:21:05,919
describe now with the cursor on the name

631
00:21:05,919 --> 00:21:07,520
of the method we can press

632
00:21:07,520 --> 00:21:10,480
shift and tab to see this tooltip that

633
00:21:10,480 --> 00:21:11,200
describes

634
00:21:11,200 --> 00:21:13,360
what this method does and what parameter

635
00:21:13,360 --> 00:21:15,360
it takes so here in front of signature

636
00:21:15,360 --> 00:21:16,240
you can see

637
00:21:16,240 --> 00:21:18,400
the describe method these are the

638
00:21:18,400 --> 00:21:19,280
parameters

639
00:21:19,280 --> 00:21:21,600
and their default value and right below

640
00:21:21,600 --> 00:21:22,559
that you can see

641
00:21:22,559 --> 00:21:25,120
the description of what this method does

642
00:21:25,120 --> 00:21:26,559
in this case it generates

643
00:21:26,559 --> 00:21:28,799
descriptive statistics that summarize

644
00:21:28,799 --> 00:21:31,600
the central tendency and so on

645
00:21:31,600 --> 00:21:33,600
similar to vs code we can also convert a

646
00:21:33,600 --> 00:21:34,880
line to comment

647
00:21:34,880 --> 00:21:37,919
by pressing command and slash on mac or

648
00:21:37,919 --> 00:21:40,000
control slash on windows

649
00:21:40,000 --> 00:21:42,799
like this now this line is a comment we

650
00:21:42,799 --> 00:21:44,000
can press the same shortcut

651
00:21:44,000 --> 00:21:47,200
one more time to remove the comment

652
00:21:47,200 --> 00:21:48,720
so these were some of the most useful

653
00:21:48,720 --> 00:21:50,320
shortcuts in jupyter

654
00:21:50,320 --> 00:21:51,679
now over the next few lectures we're

655
00:21:51,679 --> 00:21:53,760
going to work on a real machine learning

656
00:21:53,760 --> 00:21:54,320
project

657
00:21:54,320 --> 00:21:56,400
but before we get there let's delete all

658
00:21:56,400 --> 00:21:58,000
the cells here so we start with

659
00:21:58,000 --> 00:22:01,200
only a single empty cell so here in this

660
00:22:01,200 --> 00:22:01,600
cell

661
00:22:01,600 --> 00:22:03,280
first i'm going to press the escape

662
00:22:03,280 --> 00:22:05,440
button now the cell is blue

663
00:22:05,440 --> 00:22:07,360
so we are in the command mode and we can

664
00:22:07,360 --> 00:22:09,120
delete the cell by pressing d

665
00:22:09,120 --> 00:22:12,320
twice there you go now the next cell

666
00:22:12,320 --> 00:22:14,000
is activated and it's in the command

667
00:22:14,000 --> 00:22:17,200
mode so let's delete this as well

668
00:22:17,200 --> 00:22:19,200
we have two more cells to delete there

669
00:22:19,200 --> 00:22:21,760
you go and the last one

670
00:22:21,760 --> 00:22:24,159
like this so now we have an empty

671
00:22:24,159 --> 00:22:27,600
notebook with a single cell

672
00:22:27,600 --> 00:22:29,120
hey guys i just wanted to let you know

673
00:22:29,120 --> 00:22:31,080
that i have an online coding school at

674
00:22:31,080 --> 00:22:32,799
cordwindmarch.com where you can find

675
00:22:32,799 --> 00:22:34,559
plenty of courses on web and mobile

676
00:22:34,559 --> 00:22:35,280
development

677
00:22:35,280 --> 00:22:37,039
in fact i have a comprehensive python

678
00:22:37,039 --> 00:22:38,960
course that teaches you everything about

679
00:22:38,960 --> 00:22:41,039
python from the basics to more advanced

680
00:22:41,039 --> 00:22:41,679
concepts

681
00:22:41,679 --> 00:22:43,600
so after you watch this tutorial if you

682
00:22:43,600 --> 00:22:45,039
want to learn more you may want to look

683
00:22:45,039 --> 00:22:46,960
at my python course it comes with a 30

684
00:22:46,960 --> 00:22:48,159
day money back guarantee

685
00:22:48,159 --> 00:22:49,760
and a certificate of completion you can

686
00:22:49,760 --> 00:22:51,440
add to your resume in case you're

687
00:22:51,440 --> 00:22:52,000
interested

688
00:22:52,000 --> 00:22:55,840
the link is below this video

689
00:22:58,000 --> 00:22:59,280
over the next few lectures we're going

690
00:22:59,280 --> 00:23:01,039
to work on a real machine learning

691
00:23:01,039 --> 00:23:02,000
project

692
00:23:02,000 --> 00:23:04,559
imagine we have an online music store

693
00:23:04,559 --> 00:23:06,799
when our users sign up we ask their age

694
00:23:06,799 --> 00:23:09,520
and gender and based on their profile we

695
00:23:09,520 --> 00:23:10,240
recommend

696
00:23:10,240 --> 00:23:12,240
various music albums they're likely to

697
00:23:12,240 --> 00:23:14,240
buy so in this project we want to use

698
00:23:14,240 --> 00:23:15,360
machine learning to

699
00:23:15,360 --> 00:23:17,840
increase sales so we want to build a

700
00:23:17,840 --> 00:23:18,640
model

701
00:23:18,640 --> 00:23:21,039
we feed this model with some sample data

702
00:23:21,039 --> 00:23:23,280
based on the existing users

703
00:23:23,280 --> 00:23:25,280
our model will learn the patterns in our

704
00:23:25,280 --> 00:23:26,960
data so we can ask it to make

705
00:23:26,960 --> 00:23:28,000
predictions

706
00:23:28,000 --> 00:23:30,240
when a user signs up we tell our model

707
00:23:30,240 --> 00:23:32,480
hey we have a new user with this profile

708
00:23:32,480 --> 00:23:34,320
what is the kind of music that this user

709
00:23:34,320 --> 00:23:35,600
is interested in

710
00:23:35,600 --> 00:23:38,000
our model will say jazz or hip hop or

711
00:23:38,000 --> 00:23:38,720
whatever

712
00:23:38,720 --> 00:23:39,919
and based on that we can make

713
00:23:39,919 --> 00:23:42,240
suggestions to the user so this is the

714
00:23:42,240 --> 00:23:44,080
problem we're going to solve

715
00:23:44,080 --> 00:23:45,520
now back to the list of steps in a

716
00:23:45,520 --> 00:23:47,120
machine learning project

717
00:23:47,120 --> 00:23:49,440
first we need to import our data then we

718
00:23:49,440 --> 00:23:51,120
should prepare or clean it

719
00:23:51,120 --> 00:23:52,720
next we select a machine learning

720
00:23:52,720 --> 00:23:54,559
algorithm to build a model

721
00:23:54,559 --> 00:23:56,799
we train our model and ask it to make

722
00:23:56,799 --> 00:23:57,760
predictions

723
00:23:57,760 --> 00:24:00,159
and finally we evaluate our algorithm to

724
00:24:00,159 --> 00:24:01,360
see its accuracy

725
00:24:01,360 --> 00:24:03,679
if it's not accurate we either fine tune

726
00:24:03,679 --> 00:24:04,400
our model

727
00:24:04,400 --> 00:24:07,360
or select a different algorithm so let's

728
00:24:07,360 --> 00:24:09,120
focus on the first step

729
00:24:09,120 --> 00:24:11,279
download the csv file below this video

730
00:24:11,279 --> 00:24:13,039
this is a very basic csv that i've

731
00:24:13,039 --> 00:24:14,400
created for this project

732
00:24:14,400 --> 00:24:16,559
it's just some random made up data it's

733
00:24:16,559 --> 00:24:18,400
not real

734
00:24:18,400 --> 00:24:20,480
so we have a table with three columns

735
00:24:20,480 --> 00:24:22,080
age gender

736
00:24:22,080 --> 00:24:25,279
and genre gender can either be one which

737
00:24:25,279 --> 00:24:26,480
represents a male

738
00:24:26,480 --> 00:24:29,200
or zero which represents a female here

739
00:24:29,200 --> 00:24:30,799
i'm making a few assumptions

740
00:24:30,799 --> 00:24:33,760
i'm assuming that men between 20 and 25

741
00:24:33,760 --> 00:24:35,039
like hip-hop

742
00:24:35,039 --> 00:24:38,320
men between 26 and 30 like jazz

743
00:24:38,320 --> 00:24:40,720
and after the age of 30 they like

744
00:24:40,720 --> 00:24:42,559
classical music

745
00:24:42,559 --> 00:24:44,720
for women i'm assuming that if they're

746
00:24:44,720 --> 00:24:47,440
between 20 and 25 they like dance music

747
00:24:47,440 --> 00:24:49,919
if they're between 26 and 30 they like

748
00:24:49,919 --> 00:24:51,120
acoustic music

749
00:24:51,120 --> 00:24:53,120
and just like men after the age of 30

750
00:24:53,120 --> 00:24:54,880
they like classical music

751
00:24:54,880 --> 00:24:56,720
once again this is a made-up pattern

752
00:24:56,720 --> 00:24:58,240
it's not the representation of the

753
00:24:58,240 --> 00:24:59,360
reality

754
00:24:59,360 --> 00:25:01,840
so let's go ahead and download this csv

755
00:25:01,840 --> 00:25:03,120
click on this

756
00:25:03,120 --> 00:25:07,679
dot dot icon here and download this file

757
00:25:07,679 --> 00:25:10,120
in my downloads folder here we have this

758
00:25:10,120 --> 00:25:11,600
music.csv

759
00:25:11,600 --> 00:25:13,760
i'm going to drag and drop this onto

760
00:25:13,760 --> 00:25:15,440
desktop because that's where

761
00:25:15,440 --> 00:25:18,080
i've stored this hello world notebook so

762
00:25:18,080 --> 00:25:19,760
i want you to put the csv file

763
00:25:19,760 --> 00:25:22,799
right next to your jupyter notebook

764
00:25:22,799 --> 00:25:24,640
now back to our notebook we need to read

765
00:25:24,640 --> 00:25:26,000
the csv file

766
00:25:26,000 --> 00:25:28,000
so just like before first we need to

767
00:25:28,000 --> 00:25:30,000
import the pandas module

768
00:25:30,000 --> 00:25:34,000
so import pandas as pd

769
00:25:34,000 --> 00:25:37,200
and then we'll call pd that read analyze

770
00:25:37,200 --> 00:25:38,640
csv

771
00:25:38,640 --> 00:25:42,159
and the name of our file is music.csv

772
00:25:42,159 --> 00:25:44,240
as you saw earlier this returns a data

773
00:25:44,240 --> 00:25:46,240
frame which is a two-dimensional array

774
00:25:46,240 --> 00:25:48,640
similar to an excel spreadsheet so let's

775
00:25:48,640 --> 00:25:49,520
call that

776
00:25:49,520 --> 00:25:53,760
music underline data

777
00:25:53,760 --> 00:25:56,320
now let's inspect this music underline

778
00:25:56,320 --> 00:25:58,240
data to make sure we loaded everything

779
00:25:58,240 --> 00:25:59,279
properly

780
00:25:59,279 --> 00:26:02,320
so run so here's our data frame

781
00:26:02,320 --> 00:26:04,640
beautiful next minute to prepare or

782
00:26:04,640 --> 00:26:05,520
clean the data

783
00:26:05,520 --> 00:26:08,799
and that's the topic for the next

784
00:26:08,840 --> 00:26:11,840
lecture

785
00:26:13,520 --> 00:26:15,039
the second step in a machine learning

786
00:26:15,039 --> 00:26:17,039
project is cleaning or preparing the

787
00:26:17,039 --> 00:26:17,679
data

788
00:26:17,679 --> 00:26:19,919
and that involves tasks such as removing

789
00:26:19,919 --> 00:26:20,880
duplicates

790
00:26:20,880 --> 00:26:22,799
null values and so on now in this

791
00:26:22,799 --> 00:26:24,320
particular data set we don't have to do

792
00:26:24,320 --> 00:26:25,840
any kind of cleaning because we don't

793
00:26:25,840 --> 00:26:26,960
have any duplicates

794
00:26:26,960 --> 00:26:30,000
and as you can see all rows have values

795
00:26:30,000 --> 00:26:32,000
for all columns so we don't have null

796
00:26:32,000 --> 00:26:34,080
values but there is one thing we need to

797
00:26:34,080 --> 00:26:35,679
do

798
00:26:35,679 --> 00:26:38,000
we should split this data set into two

799
00:26:38,000 --> 00:26:39,600
separate data sets

800
00:26:39,600 --> 00:26:41,520
one with the first two columns which we

801
00:26:41,520 --> 00:26:43,360
refer to as the input set

802
00:26:43,360 --> 00:26:45,279
and the other with the last column which

803
00:26:45,279 --> 00:26:47,360
we refer to as the output set

804
00:26:47,360 --> 00:26:49,760
so when we train a model we give it two

805
00:26:49,760 --> 00:26:51,120
separate data sets

806
00:26:51,120 --> 00:26:53,760
the input set and the output set the

807
00:26:53,760 --> 00:26:54,720
output set

808
00:26:54,720 --> 00:26:57,200
which is in this case the genre column

809
00:26:57,200 --> 00:26:58,000
contains

810
00:26:58,000 --> 00:27:00,000
the predictions so we're telling our

811
00:27:00,000 --> 00:27:01,279
model that if we have

812
00:27:01,279 --> 00:27:04,080
a user who's 20 years old and is a male

813
00:27:04,080 --> 00:27:04,720
they like

814
00:27:04,720 --> 00:27:07,440
hip hop once we train our model then we

815
00:27:07,440 --> 00:27:09,200
give it a new input set

816
00:27:09,200 --> 00:27:11,039
for example we say hey we have a new

817
00:27:11,039 --> 00:27:13,279
user who is 21 years old

818
00:27:13,279 --> 00:27:15,600
and is a male what is the genre of the

819
00:27:15,600 --> 00:27:17,919
music that this user probably likes

820
00:27:17,919 --> 00:27:20,080
as you can see in our input set we don't

821
00:27:20,080 --> 00:27:22,880
have a sample for a 21 year old male

822
00:27:22,880 --> 00:27:24,720
so we're going to ask our model to

823
00:27:24,720 --> 00:27:25,919
predict that

824
00:27:25,919 --> 00:27:27,840
that is the reason we need to split this

825
00:27:27,840 --> 00:27:30,559
data set into two separate sets

826
00:27:30,559 --> 00:27:34,559
input and output so back to our code

827
00:27:34,559 --> 00:27:36,720
this data frame object has a method

828
00:27:36,720 --> 00:27:39,679
called drop

829
00:27:39,679 --> 00:27:42,480
now if you put the cursor under method

830
00:27:42,480 --> 00:27:43,520
name and press

831
00:27:43,520 --> 00:27:46,960
shift and tab you can see this tooltip

832
00:27:46,960 --> 00:27:48,960
so this is the signature of this drop

833
00:27:48,960 --> 00:27:50,880
method these are the parameters that we

834
00:27:50,880 --> 00:27:52,000
can pass here

835
00:27:52,000 --> 00:27:53,360
the parameter we're going to use in this

836
00:27:53,360 --> 00:27:55,679
lecture is columns which is set to none

837
00:27:55,679 --> 00:27:56,880
by default

838
00:27:56,880 --> 00:27:58,640
with this parameter we can specify the

839
00:27:58,640 --> 00:28:00,399
columns we want to drop

840
00:28:00,399 --> 00:28:04,640
so in this case we set columns

841
00:28:04,640 --> 00:28:08,559
to an array with one string genre

842
00:28:08,559 --> 00:28:10,799
now this method doesn't actually modify

843
00:28:10,799 --> 00:28:12,320
the original data set

844
00:28:12,320 --> 00:28:14,399
in fact it will create a new data set

845
00:28:14,399 --> 00:28:15,440
but without

846
00:28:15,440 --> 00:28:19,039
this column so by convention we use a

847
00:28:19,039 --> 00:28:20,000
capital x

848
00:28:20,000 --> 00:28:23,279
to represent that data set so capital x

849
00:28:23,279 --> 00:28:26,640
equals this expression now

850
00:28:26,640 --> 00:28:30,000
let's inspect x so as you can

851
00:28:30,000 --> 00:28:32,720
see our input set or x includes these

852
00:28:32,720 --> 00:28:33,520
two columns

853
00:28:33,520 --> 00:28:35,440
age and gender it doesn't have the

854
00:28:35,440 --> 00:28:37,279
output or predictions

855
00:28:37,279 --> 00:28:41,039
next we need to create our output set so

856
00:28:41,039 --> 00:28:43,679
once again we start with our data frame

857
00:28:43,679 --> 00:28:45,120
music data

858
00:28:45,120 --> 00:28:47,360
using square brackets we can get all the

859
00:28:47,360 --> 00:28:49,039
values in a given column

860
00:28:49,039 --> 00:28:52,240
in this case genre once again this

861
00:28:52,240 --> 00:28:53,039
returns

862
00:28:53,039 --> 00:28:55,760
a new data set by convention we use a

863
00:28:55,760 --> 00:28:56,960
lowercase y

864
00:28:56,960 --> 00:28:59,360
to represent that so that is our output

865
00:28:59,360 --> 00:29:00,399
data set

866
00:29:00,399 --> 00:29:03,840
let's inspect that as well

867
00:29:03,840 --> 00:29:06,559
so in this data set we only have the

868
00:29:06,559 --> 00:29:07,600
predictions or

869
00:29:07,600 --> 00:29:10,720
the answers so we have prepared our data

870
00:29:10,720 --> 00:29:12,559
next we need to create a model using an

871
00:29:12,559 --> 00:29:15,120
algorithm

872
00:29:19,440 --> 00:29:21,360
the next step is to build a model using

873
00:29:21,360 --> 00:29:22,960
a machine learning algorithm

874
00:29:22,960 --> 00:29:24,640
there are so many algorithms out there

875
00:29:24,640 --> 00:29:27,200
and each algorithm has its pros and cons

876
00:29:27,200 --> 00:29:29,760
in terms of the performance and accuracy

877
00:29:29,760 --> 00:29:30,960
in this lecture we're going to use a

878
00:29:30,960 --> 00:29:32,559
very simple algorithm called

879
00:29:32,559 --> 00:29:34,799
decision tree now the good news is that

880
00:29:34,799 --> 00:29:36,640
we don't have to explicitly

881
00:29:36,640 --> 00:29:38,720
program these algorithms they're already

882
00:29:38,720 --> 00:29:40,960
implemented for us in a library called

883
00:29:40,960 --> 00:29:45,760
scikit-learn so here on the top

884
00:29:45,760 --> 00:29:49,200
from sklearn.3

885
00:29:49,200 --> 00:29:52,320
let's import the decision

886
00:29:52,320 --> 00:29:56,240
tree classifier so sklearn

887
00:29:56,240 --> 00:29:58,080
is the package that comes with

888
00:29:58,080 --> 00:30:00,000
scikit-learn library this is the most

889
00:30:00,000 --> 00:30:01,840
popular machine learning library in

890
00:30:01,840 --> 00:30:02,960
python

891
00:30:02,960 --> 00:30:05,039
in this package we have a module called

892
00:30:05,039 --> 00:30:07,120
tree and in this module we have a class

893
00:30:07,120 --> 00:30:07,679
called

894
00:30:07,679 --> 00:30:10,640
decision tree classifier this class

895
00:30:10,640 --> 00:30:11,279
implements

896
00:30:11,279 --> 00:30:14,960
the decision tree algorithm okay so

897
00:30:14,960 --> 00:30:16,799
now we need to create a new instance of

898
00:30:16,799 --> 00:30:18,320
this class

899
00:30:18,320 --> 00:30:21,039
so at the end let's create an object

900
00:30:21,039 --> 00:30:21,600
called

901
00:30:21,600 --> 00:30:24,799
model and set it to a new instance of

902
00:30:24,799 --> 00:30:26,000
decision

903
00:30:26,000 --> 00:30:29,120
tree classifier

904
00:30:29,120 --> 00:30:32,000
like this so now we have a model next we

905
00:30:32,000 --> 00:30:33,600
need to train it so it learns

906
00:30:33,600 --> 00:30:35,679
patterns in the data and that is pretty

907
00:30:35,679 --> 00:30:37,120
easy we call

908
00:30:37,120 --> 00:30:40,640
model that fit this method takes two

909
00:30:40,640 --> 00:30:41,440
data sets

910
00:30:41,440 --> 00:30:44,880
the input set and the output set so

911
00:30:44,880 --> 00:30:48,960
they are capital x and y

912
00:30:48,960 --> 00:30:50,720
now finally we need to ask our model to

913
00:30:50,720 --> 00:30:52,000
make a prediction

914
00:30:52,000 --> 00:30:53,760
so we can ask it what is the kind of

915
00:30:53,760 --> 00:30:56,399
music that a 21 year old male likes

916
00:30:56,399 --> 00:30:59,360
now before we do that let's temporarily

917
00:30:59,360 --> 00:31:00,320
inspect

918
00:31:00,320 --> 00:31:04,159
our initial data set that is music data

919
00:31:04,159 --> 00:31:07,279
so look what we got here

920
00:31:07,279 --> 00:31:09,440
as i told you earlier i've assumed that

921
00:31:09,440 --> 00:31:10,720
men between 20

922
00:31:10,720 --> 00:31:13,840
and 25 like hip-hop music but here we

923
00:31:13,840 --> 00:31:14,559
only have

924
00:31:14,559 --> 00:31:17,679
three samples for men aged 20

925
00:31:17,679 --> 00:31:20,480
23 and 25 we don't have a sample for a

926
00:31:20,480 --> 00:31:22,000
21 year old male

927
00:31:22,000 --> 00:31:23,840
so if you ask our model to predict the

928
00:31:23,840 --> 00:31:25,679
kind of music that a 21 year old male

929
00:31:25,679 --> 00:31:27,440
likes we expect it to say

930
00:31:27,440 --> 00:31:30,799
hip hop similarly i've assumed that

931
00:31:30,799 --> 00:31:32,559
women between 20 and 25

932
00:31:32,559 --> 00:31:34,480
like dance music but we don't have a

933
00:31:34,480 --> 00:31:36,799
sample for a 22 year old female

934
00:31:36,799 --> 00:31:38,880
so once again if you ask our model to

935
00:31:38,880 --> 00:31:40,080
predict the kind of music

936
00:31:40,080 --> 00:31:42,640
that a 22 year old woman likes we expect

937
00:31:42,640 --> 00:31:43,360
it to say

938
00:31:43,360 --> 00:31:46,559
dance so with these assumptions

939
00:31:46,559 --> 00:31:48,799
let's go ahead and ask our model to make

940
00:31:48,799 --> 00:31:50,000
predictions

941
00:31:50,000 --> 00:31:53,279
so let's remove

942
00:31:53,279 --> 00:31:56,080
the last line and instead we're going to

943
00:31:56,080 --> 00:31:56,720
call

944
00:31:56,720 --> 00:32:00,000
model dot predict this method

945
00:32:00,000 --> 00:32:03,120
takes a two dimensional array so here's

946
00:32:03,120 --> 00:32:04,399
the outer array

947
00:32:04,399 --> 00:32:07,039
in this array each element is an array

948
00:32:07,039 --> 00:32:08,399
so i'm going to pass

949
00:32:08,399 --> 00:32:10,640
another array here and in this array i'm

950
00:32:10,640 --> 00:32:11,440
going to pass

951
00:32:11,440 --> 00:32:14,480
a new input set a 21 year old male

952
00:32:14,480 --> 00:32:17,919
so 21 comma one that is like a new

953
00:32:17,919 --> 00:32:18,880
record

954
00:32:18,880 --> 00:32:22,159
in this table okay so this is one input

955
00:32:22,159 --> 00:32:22,720
set

956
00:32:22,720 --> 00:32:24,480
let's pass another input set for a

957
00:32:24,480 --> 00:32:26,159
22-year female

958
00:32:26,159 --> 00:32:29,760
so here's another array here we add 22

959
00:32:29,760 --> 00:32:32,640
comma zero so we're asking our model to

960
00:32:32,640 --> 00:32:34,960
make two predictions at the same time

961
00:32:34,960 --> 00:32:38,000
we get the result and store it in a

962
00:32:38,000 --> 00:32:39,919
variable called predictions

963
00:32:39,919 --> 00:32:43,120
and finally let's inspect that in our

964
00:32:43,120 --> 00:32:44,640
notebook

965
00:32:44,640 --> 00:32:48,159
run look what we got

966
00:32:48,159 --> 00:32:50,720
our model is saying that a 21 year old

967
00:32:50,720 --> 00:32:51,360
male

968
00:32:51,360 --> 00:32:53,919
likes hip hop and a 22 year old female

969
00:32:53,919 --> 00:32:54,399
likes

970
00:32:54,399 --> 00:32:56,559
dance music so our model could

971
00:32:56,559 --> 00:32:58,240
successfully make predictions here

972
00:32:58,240 --> 00:33:00,640
beautiful but wait a second building a

973
00:33:00,640 --> 00:33:02,559
model that makes predictions accurately

974
00:33:02,559 --> 00:33:03,919
is not always that easy

975
00:33:03,919 --> 00:33:05,840
as i told you earlier after we build a

976
00:33:05,840 --> 00:33:08,320
model we need to measure its accuracy

977
00:33:08,320 --> 00:33:10,159
and if it's not accurate enough we

978
00:33:10,159 --> 00:33:11,760
should either fine tune it or build a

979
00:33:11,760 --> 00:33:13,919
model using a different algorithm

980
00:33:13,919 --> 00:33:15,200
so in the next lecture i'm going to show

981
00:33:15,200 --> 00:33:19,600
you how to measure the accuracy of a

982
00:33:22,840 --> 00:33:24,320
model

983
00:33:24,320 --> 00:33:25,360
in this lecture i'm going to show you

984
00:33:25,360 --> 00:33:27,440
how to measure the accuracy of your

985
00:33:27,440 --> 00:33:28,240
models

986
00:33:28,240 --> 00:33:30,320
now in order to do so first we need to

987
00:33:30,320 --> 00:33:31,440
split our data set

988
00:33:31,440 --> 00:33:34,000
into two sets one for training and the

989
00:33:34,000 --> 00:33:35,279
other for testing

990
00:33:35,279 --> 00:33:37,519
because right now we're passing the

991
00:33:37,519 --> 00:33:38,799
entire data set

992
00:33:38,799 --> 00:33:40,799
for training the model and we're using

993
00:33:40,799 --> 00:33:42,080
two samples

994
00:33:42,080 --> 00:33:44,159
for making predictions that is not

995
00:33:44,159 --> 00:33:46,159
enough to calculate the accuracy of a

996
00:33:46,159 --> 00:33:46,799
model

997
00:33:46,799 --> 00:33:49,279
a general rule of thumb is to allocate

998
00:33:49,279 --> 00:33:51,360
70 to 80 percent of our data

999
00:33:51,360 --> 00:33:53,200
for training and the other twenty to

1000
00:33:53,200 --> 00:33:54,960
thirty percent for testing

1001
00:33:54,960 --> 00:33:57,200
then instead of passing only two samples

1002
00:33:57,200 --> 00:33:58,480
for making predictions

1003
00:33:58,480 --> 00:34:00,480
we can pass the data set we have for

1004
00:34:00,480 --> 00:34:02,559
testing we'll get the predictions

1005
00:34:02,559 --> 00:34:03,760
and then we can compare these

1006
00:34:03,760 --> 00:34:06,000
predictions with the actual values

1007
00:34:06,000 --> 00:34:08,320
in the test set based on that we can

1008
00:34:08,320 --> 00:34:09,839
calculate the accuracy

1009
00:34:09,839 --> 00:34:11,839
that's really easy all we have to do is

1010
00:34:11,839 --> 00:34:13,520
to import a couple of functions

1011
00:34:13,520 --> 00:34:15,199
and call them in this code let me show

1012
00:34:15,199 --> 00:34:18,239
you so first on the top

1013
00:34:18,239 --> 00:34:21,440
from sklearn the model

1014
00:34:21,440 --> 00:34:24,800
underline selection module we import

1015
00:34:24,800 --> 00:34:28,239
a function called train test split

1016
00:34:28,239 --> 00:34:30,079
with this function we can easily split

1017
00:34:30,079 --> 00:34:32,079
our data set into two sets

1018
00:34:32,079 --> 00:34:35,599
for training and testing now

1019
00:34:35,599 --> 00:34:39,040
right here after we define x and y sets

1020
00:34:39,040 --> 00:34:40,639
we call this function

1021
00:34:40,639 --> 00:34:44,399
so train test split

1022
00:34:44,399 --> 00:34:47,760
we give it three arguments x y

1023
00:34:47,760 --> 00:34:50,079
and a keyboard argument that specifies

1024
00:34:50,079 --> 00:34:52,239
the size of our test data set

1025
00:34:52,239 --> 00:34:57,040
so test underline size we set it to 0.2

1026
00:34:57,040 --> 00:34:59,280
so we are allocating 20 of our data for

1027
00:34:59,280 --> 00:35:00,560
testing

1028
00:35:00,560 --> 00:35:03,839
now this function returns a tuple so we

1029
00:35:03,839 --> 00:35:05,920
can unpack it into four variables

1030
00:35:05,920 --> 00:35:09,680
right here x underline train

1031
00:35:09,680 --> 00:35:13,760
x underline test y underline train

1032
00:35:13,760 --> 00:35:16,880
and y underline test

1033
00:35:16,880 --> 00:35:19,119
so the first two variables are the input

1034
00:35:19,119 --> 00:35:20,400
sets for training

1035
00:35:20,400 --> 00:35:24,079
and testing and the other are the output

1036
00:35:24,079 --> 00:35:24,560
sets

1037
00:35:24,560 --> 00:35:27,760
for training and testing now when

1038
00:35:27,760 --> 00:35:29,520
training our model

1039
00:35:29,520 --> 00:35:31,280
instead of passing the entire data set

1040
00:35:31,280 --> 00:35:32,640
we want to pass only

1041
00:35:32,640 --> 00:35:36,160
the training data set so x

1042
00:35:36,160 --> 00:35:39,200
underline train and y

1043
00:35:39,200 --> 00:35:42,320
underline train also when making

1044
00:35:42,320 --> 00:35:42,960
predictions

1045
00:35:42,960 --> 00:35:44,800
instead of passing these two samples we

1046
00:35:44,800 --> 00:35:46,320
pass x

1047
00:35:46,320 --> 00:35:49,280
underline test so that is the data set

1048
00:35:49,280 --> 00:35:50,320
that contains

1049
00:35:50,320 --> 00:35:53,680
input values for testing now we get

1050
00:35:53,680 --> 00:35:55,599
the predictions to calculate the

1051
00:35:55,599 --> 00:35:57,440
accuracy we simply have to compare these

1052
00:35:57,440 --> 00:35:58,400
predictions

1053
00:35:58,400 --> 00:36:01,280
with the actual values we have in our

1054
00:36:01,280 --> 00:36:02,160
output set

1055
00:36:02,160 --> 00:36:05,040
for testing that is very easy first on

1056
00:36:05,040 --> 00:36:06,240
the top we need to import

1057
00:36:06,240 --> 00:36:10,079
a function so from sklearn.metrics

1058
00:36:10,079 --> 00:36:11,920
metrics

1059
00:36:11,920 --> 00:36:16,320
import accuracy underlying score

1060
00:36:16,320 --> 00:36:17,920
now at the very end we call this

1061
00:36:17,920 --> 00:36:20,079
function so accuracy

1062
00:36:20,079 --> 00:36:23,680
score and

1063
00:36:23,680 --> 00:36:26,560
give it two arguments y underline test

1064
00:36:26,560 --> 00:36:27,520
which contains

1065
00:36:27,520 --> 00:36:31,760
the expected values and predictions

1066
00:36:31,760 --> 00:36:34,720
which contains the actual values now

1067
00:36:34,720 --> 00:36:35,760
this function returns

1068
00:36:35,760 --> 00:36:38,800
an accuracy score between zero to one so

1069
00:36:38,800 --> 00:36:41,280
we can store it here

1070
00:36:41,280 --> 00:36:44,960
and simply display it on the console

1071
00:36:44,960 --> 00:36:48,240
so let's go ahead and run this program

1072
00:36:48,240 --> 00:36:50,960
so the accuracy score is one or 100

1073
00:36:50,960 --> 00:36:51,760
percent

1074
00:36:51,760 --> 00:36:53,440
but if we run this one more time we're

1075
00:36:53,440 --> 00:36:55,040
going to see a different result

1076
00:36:55,040 --> 00:36:57,119
because every time we split our data set

1077
00:36:57,119 --> 00:36:58,880
into training and test sets

1078
00:36:58,880 --> 00:37:00,800
we'll have different data sets because

1079
00:37:00,800 --> 00:37:02,880
this function randomly picks data

1080
00:37:02,880 --> 00:37:05,680
for training and testing let me show you

1081
00:37:05,680 --> 00:37:06,880
so put the cursor

1082
00:37:06,880 --> 00:37:08,640
in the cell now you can see this cell is

1083
00:37:08,640 --> 00:37:10,640
activated note that if you click this

1084
00:37:10,640 --> 00:37:11,440
button here

1085
00:37:11,440 --> 00:37:14,320
it will run this cell and also inserts a

1086
00:37:14,320 --> 00:37:15,119
new cell

1087
00:37:15,119 --> 00:37:17,200
below this cell let me show you so if i

1088
00:37:17,200 --> 00:37:19,119
go to the second cell

1089
00:37:19,119 --> 00:37:21,839
press escape button now we are in the

1090
00:37:21,839 --> 00:37:22,800
command mode

1091
00:37:22,800 --> 00:37:26,160
press d twice okay now it's deleted

1092
00:37:26,160 --> 00:37:29,599
if we click the run button you can see

1093
00:37:29,599 --> 00:37:31,680
this code was executed and now we have a

1094
00:37:31,680 --> 00:37:32,960
new cell

1095
00:37:32,960 --> 00:37:34,240
so if you want to run our first cell

1096
00:37:34,240 --> 00:37:36,000
multiple times every time we have to

1097
00:37:36,000 --> 00:37:36,800
click this

1098
00:37:36,800 --> 00:37:38,880
and then run it and then click again and

1099
00:37:38,880 --> 00:37:40,720
run it it's a little bit tedious

1100
00:37:40,720 --> 00:37:42,880
so i'll show you a shortcut activate the

1101
00:37:42,880 --> 00:37:44,079
first cell

1102
00:37:44,079 --> 00:37:47,359
and press ctrl and enter

1103
00:37:47,359 --> 00:37:49,520
this runs the current cell without

1104
00:37:49,520 --> 00:37:50,800
adding a new cell

1105
00:37:50,800 --> 00:37:53,599
below it so back here let's run it

1106
00:37:53,599 --> 00:37:54,480
multiple times

1107
00:37:54,480 --> 00:37:57,160
okay now look the accuracy dropped to

1108
00:37:57,160 --> 00:37:58,400
0.75

1109
00:37:58,400 --> 00:38:00,480
it's still good so the accuracy score

1110
00:38:00,480 --> 00:38:02,400
here is somewhere between

1111
00:38:02,400 --> 00:38:06,240
75 to 100 but let me show you something

1112
00:38:06,240 --> 00:38:10,000
if i change the test size from 0.2

1113
00:38:10,000 --> 00:38:13,119
to 0.8 so essentially we're using only

1114
00:38:13,119 --> 00:38:13,599
20

1115
00:38:13,599 --> 00:38:16,000
of our data for training this model and

1116
00:38:16,000 --> 00:38:17,599
we're using the other 80

1117
00:38:17,599 --> 00:38:20,160
for testing now let's see what happens

1118
00:38:20,160 --> 00:38:22,240
when we run this cell multiple times

1119
00:38:22,240 --> 00:38:25,520
so control and enter look the accuracy

1120
00:38:25,520 --> 00:38:27,680
immediately dropped to 0.4

1121
00:38:27,680 --> 00:38:30,800
one more time now 46 percent

1122
00:38:30,800 --> 00:38:35,440
40 26 it's really really bad

1123
00:38:35,440 --> 00:38:37,440
the reason this is happening is because

1124
00:38:37,440 --> 00:38:39,280
we are using very little data

1125
00:38:39,280 --> 00:38:41,440
for training this model this is one of

1126
00:38:41,440 --> 00:38:43,680
the key concepts in machine learning

1127
00:38:43,680 --> 00:38:45,520
the more data we give to our model and

1128
00:38:45,520 --> 00:38:46,960
the cleaner the data is

1129
00:38:46,960 --> 00:38:49,200
we get the better result so if we have

1130
00:38:49,200 --> 00:38:50,079
duplicates

1131
00:38:50,079 --> 00:38:52,800
irrelevant data or incomplete values our

1132
00:38:52,800 --> 00:38:53,599
model will learn

1133
00:38:53,599 --> 00:38:55,760
bad patterns in our data that is why

1134
00:38:55,760 --> 00:38:57,520
it's really important to clean our data

1135
00:38:57,520 --> 00:39:00,240
before training our model now let's

1136
00:39:00,240 --> 00:39:03,040
change this back to 0.2

1137
00:39:03,040 --> 00:39:05,440
run this one more time okay now the

1138
00:39:05,440 --> 00:39:06,800
accuracy is one

1139
00:39:06,800 --> 00:39:10,079
75 percent now we drop to 50

1140
00:39:10,079 --> 00:39:11,839
again the reason this is happening is

1141
00:39:11,839 --> 00:39:14,000
because we don't have enough data

1142
00:39:14,000 --> 00:39:16,079
some machine learning problems require

1143
00:39:16,079 --> 00:39:18,320
thousands or even millions of samples

1144
00:39:18,320 --> 00:39:20,800
to train a model the more complex the

1145
00:39:20,800 --> 00:39:22,640
problem is the more data we need

1146
00:39:22,640 --> 00:39:24,320
for example here we're only dealing with

1147
00:39:24,320 --> 00:39:26,079
a table of three columns

1148
00:39:26,079 --> 00:39:28,000
but if you want to build a model to tell

1149
00:39:28,000 --> 00:39:30,000
if a picture is a cat or a dog or a

1150
00:39:30,000 --> 00:39:31,200
horse or a lion

1151
00:39:31,200 --> 00:39:33,359
we'll need millions of pictures the more

1152
00:39:33,359 --> 00:39:34,880
animals we want to support the more

1153
00:39:34,880 --> 00:39:36,079
pictures we need

1154
00:39:36,079 --> 00:39:37,280
in the next lecture we're going to talk

1155
00:39:37,280 --> 00:39:43,839
about model persistence

1156
00:39:45,359 --> 00:39:47,599
so this is a very basic implementation

1157
00:39:47,599 --> 00:39:49,839
of building and training a model to make

1158
00:39:49,839 --> 00:39:51,119
predictions

1159
00:39:51,119 --> 00:39:53,200
now to simplify things i have removed

1160
00:39:53,200 --> 00:39:54,640
all the code that we wrote in the last

1161
00:39:54,640 --> 00:39:55,599
lecture for

1162
00:39:55,599 --> 00:39:57,599
calculating the accuracy because in this

1163
00:39:57,599 --> 00:39:58,720
lecture we're going to focus

1164
00:39:58,720 --> 00:40:01,680
on a different topic so basically we

1165
00:40:01,680 --> 00:40:03,280
import our data set

1166
00:40:03,280 --> 00:40:06,400
create a model train it and then

1167
00:40:06,400 --> 00:40:08,960
ask it to make predictions now this

1168
00:40:08,960 --> 00:40:10,079
piece of code that you see

1169
00:40:10,079 --> 00:40:12,480
here is not what we want to run every

1170
00:40:12,480 --> 00:40:14,560
time we have a new user or every time we

1171
00:40:14,560 --> 00:40:16,079
want to make recommendations

1172
00:40:16,079 --> 00:40:18,160
to an existing user because training a

1173
00:40:18,160 --> 00:40:19,839
model can sometimes be really time

1174
00:40:19,839 --> 00:40:20,800
consuming

1175
00:40:20,800 --> 00:40:22,319
in this example we're dealing with a

1176
00:40:22,319 --> 00:40:23,839
very small data set that has

1177
00:40:23,839 --> 00:40:26,400
only 20 records but in real applications

1178
00:40:26,400 --> 00:40:27,680
we might have a data set

1179
00:40:27,680 --> 00:40:30,160
with thousands or millions of samples

1180
00:40:30,160 --> 00:40:31,760
training a model for that might take

1181
00:40:31,760 --> 00:40:32,480
seconds

1182
00:40:32,480 --> 00:40:35,280
minutes or even hours so that is why

1183
00:40:35,280 --> 00:40:37,520
model persistence is important

1184
00:40:37,520 --> 00:40:39,760
once in a while we build and train our

1185
00:40:39,760 --> 00:40:42,319
model and then we'll save it to a file

1186
00:40:42,319 --> 00:40:43,440
now next time we want to make

1187
00:40:43,440 --> 00:40:45,599
predictions we simply load the model

1188
00:40:45,599 --> 00:40:46,720
from the file and

1189
00:40:46,720 --> 00:40:49,119
ask it to make predictions that model is

1190
00:40:49,119 --> 00:40:51,280
already trained we don't need to retrain

1191
00:40:51,280 --> 00:40:51,760
it

1192
00:40:51,760 --> 00:40:54,000
it's like an intelligent person so let

1193
00:40:54,000 --> 00:40:55,839
me show you how to do this it's very

1194
00:40:55,839 --> 00:40:57,040
very easy

1195
00:40:57,040 --> 00:41:02,000
on the top from sklearn.externals

1196
00:41:02,000 --> 00:41:05,359
module we import

1197
00:41:05,359 --> 00:41:08,560
lib this job live object has methods for

1198
00:41:08,560 --> 00:41:09,280
saving

1199
00:41:09,280 --> 00:41:12,400
and loading models so after

1200
00:41:12,400 --> 00:41:15,440
we train our model we simply call

1201
00:41:15,440 --> 00:41:18,560
joblib dot dump

1202
00:41:18,560 --> 00:41:21,599
and give it two arguments our model and

1203
00:41:21,599 --> 00:41:22,640
the name of the file

1204
00:41:22,640 --> 00:41:24,800
in which we want to store this model

1205
00:41:24,800 --> 00:41:25,839
let's call that

1206
00:41:25,839 --> 00:41:28,880
music dash recommender

1207
00:41:28,880 --> 00:41:33,119
dot job lib that's all we have to do

1208
00:41:33,119 --> 00:41:34,880
now temporarily i'm going to comment out

1209
00:41:34,880 --> 00:41:36,480
this line we don't want to make any

1210
00:41:36,480 --> 00:41:38,240
predictions we just want to store our

1211
00:41:38,240 --> 00:41:40,079
trained model in a file

1212
00:41:40,079 --> 00:41:42,880
so let's run this cell with control and

1213
00:41:42,880 --> 00:41:44,560
slash

1214
00:41:44,560 --> 00:41:48,000
okay look in the output we have an array

1215
00:41:48,000 --> 00:41:50,240
that contains the name of our model file

1216
00:41:50,240 --> 00:41:52,160
so this is the return value of the dump

1217
00:41:52,160 --> 00:41:53,599
method

1218
00:41:53,599 --> 00:41:55,760
now back to our desktop right next to my

1219
00:41:55,760 --> 00:41:57,920
notebook you can see our job live file

1220
00:41:57,920 --> 00:41:59,760
this is where our model is stored it's

1221
00:41:59,760 --> 00:42:01,760
simply a binary file

1222
00:42:01,760 --> 00:42:04,000
now back to our jupyter notebook as i

1223
00:42:04,000 --> 00:42:05,760
told you before in a real application we

1224
00:42:05,760 --> 00:42:07,359
don't want to train a model

1225
00:42:07,359 --> 00:42:10,720
every time so let's comment out

1226
00:42:10,720 --> 00:42:12,480
these few lines so i've selected these

1227
00:42:12,480 --> 00:42:14,800
few lines on mac we can press

1228
00:42:14,800 --> 00:42:17,280
command and slash on windows control

1229
00:42:17,280 --> 00:42:18,720
slash

1230
00:42:18,720 --> 00:42:20,960
okay these lines are commented out now

1231
00:42:20,960 --> 00:42:23,119
this time instead of dumping our model

1232
00:42:23,119 --> 00:42:24,720
we're going to load it so we call the

1233
00:42:24,720 --> 00:42:27,119
load method we don't have the model we

1234
00:42:27,119 --> 00:42:28,240
simply pass

1235
00:42:28,240 --> 00:42:31,040
the name of our model file this returns

1236
00:42:31,040 --> 00:42:32,079
our trained

1237
00:42:32,079 --> 00:42:35,040
model now with these two lines we can

1238
00:42:35,040 --> 00:42:35,839
simply

1239
00:42:35,839 --> 00:42:38,880
make predictions so earlier we assumed

1240
00:42:38,880 --> 00:42:40,960
that men between 20 and 25

1241
00:42:40,960 --> 00:42:43,920
like hip-hop music let's print

1242
00:42:43,920 --> 00:42:45,839
predictions and see if our model is

1243
00:42:45,839 --> 00:42:47,680
behaving correctly or not

1244
00:42:47,680 --> 00:42:50,880
so control and enter there you go

1245
00:42:50,880 --> 00:42:54,880
so this is how we persist and load

1246
00:42:56,839 --> 00:42:59,839
models

1247
00:42:59,920 --> 00:43:01,440
earlier in this section i told you that

1248
00:43:01,440 --> 00:43:03,359
decision trees are the easiest to

1249
00:43:03,359 --> 00:43:04,800
understand and that's why we started

1250
00:43:04,800 --> 00:43:05,599
machine learning

1251
00:43:05,599 --> 00:43:07,599
with decision trees in this lecture

1252
00:43:07,599 --> 00:43:09,440
we're going to export our model in a

1253
00:43:09,440 --> 00:43:10,560
visual format

1254
00:43:10,560 --> 00:43:12,960
so you will see how this model makes

1255
00:43:12,960 --> 00:43:13,920
predictions

1256
00:43:13,920 --> 00:43:15,680
that is really really cool let me show

1257
00:43:15,680 --> 00:43:17,440
you so

1258
00:43:17,440 --> 00:43:19,680
once again i've simplified this code so

1259
00:43:19,680 --> 00:43:21,119
we simply import

1260
00:43:21,119 --> 00:43:24,640
our data set create input and output

1261
00:43:24,640 --> 00:43:25,520
sets

1262
00:43:25,520 --> 00:43:28,640
create a model and train it

1263
00:43:28,640 --> 00:43:30,880
that's all we are doing now i want you

1264
00:43:30,880 --> 00:43:32,160
to follow along with me

1265
00:43:32,160 --> 00:43:34,400
type everything exactly as i show you in

1266
00:43:34,400 --> 00:43:35,839
this lecture don't worry about

1267
00:43:35,839 --> 00:43:36,960
what everything means we're going to

1268
00:43:36,960 --> 00:43:39,200
come back to it shortly so

1269
00:43:39,200 --> 00:43:42,400
on the top from sklearn

1270
00:43:42,400 --> 00:43:45,920
import tree this object

1271
00:43:45,920 --> 00:43:48,000
has a method for exporting our decision

1272
00:43:48,000 --> 00:43:50,240
tree in a graphical format

1273
00:43:50,240 --> 00:43:53,520
so after we train our model let's call

1274
00:43:53,520 --> 00:43:56,720
tree dot export underline

1275
00:43:56,720 --> 00:43:59,760
graph vis now here are a few arguments

1276
00:43:59,760 --> 00:44:00,800
we need to pass

1277
00:44:00,800 --> 00:44:03,520
the first argument is our model the

1278
00:44:03,520 --> 00:44:05,680
second is the name of the output file

1279
00:44:05,680 --> 00:44:07,200
so here we're going to use keyword

1280
00:44:07,200 --> 00:44:09,040
arguments because this method takes so

1281
00:44:09,040 --> 00:44:10,319
many parameters and we want to

1282
00:44:10,319 --> 00:44:11,520
selectively pass

1283
00:44:11,520 --> 00:44:13,680
keyword arguments without worrying about

1284
00:44:13,680 --> 00:44:14,880
their order

1285
00:44:14,880 --> 00:44:17,760
so the parameter we're going to set is

1286
00:44:17,760 --> 00:44:18,240
out

1287
00:44:18,240 --> 00:44:21,359
underline file let's set this to

1288
00:44:21,359 --> 00:44:25,119
music dash recommender dot

1289
00:44:25,119 --> 00:44:28,240
d o t this is the dot format which is a

1290
00:44:28,240 --> 00:44:28,720
graph

1291
00:44:28,720 --> 00:44:30,480
description language you'll see that

1292
00:44:30,480 --> 00:44:31,760
shortly

1293
00:44:31,760 --> 00:44:34,319
the other parameter we want to set is

1294
00:44:34,319 --> 00:44:35,119
feature

1295
00:44:35,119 --> 00:44:38,240
underline names we set this to an array

1296
00:44:38,240 --> 00:44:41,520
of two strings age and

1297
00:44:41,520 --> 00:44:43,920
gender these are the features or the

1298
00:44:43,920 --> 00:44:44,560
columns

1299
00:44:44,560 --> 00:44:46,560
of our data set so they are the

1300
00:44:46,560 --> 00:44:48,720
properties or features of our data

1301
00:44:48,720 --> 00:44:52,720
okay the other parameter is class names

1302
00:44:52,720 --> 00:44:55,839
so class underline names we should set

1303
00:44:55,839 --> 00:44:57,520
this to the list of classes

1304
00:44:57,520 --> 00:45:00,720
or labels we have in our output data set

1305
00:45:00,720 --> 00:45:04,079
like hip hop jazz classical and so on

1306
00:45:04,079 --> 00:45:06,960
so this y data set includes all the

1307
00:45:06,960 --> 00:45:09,520
genres or all the classes of our data

1308
00:45:09,520 --> 00:45:11,280
but they're repeated a few times in this

1309
00:45:11,280 --> 00:45:13,200
data set so

1310
00:45:13,200 --> 00:45:16,960
here we call y dot unique this returns

1311
00:45:16,960 --> 00:45:19,359
the unique list of classes now we should

1312
00:45:19,359 --> 00:45:20,960
sort this alphabetically

1313
00:45:20,960 --> 00:45:24,079
so we call the sorted function and

1314
00:45:24,079 --> 00:45:28,720
pass the result a y dot unique

1315
00:45:28,720 --> 00:45:32,400
the next parameter is label we set this

1316
00:45:32,400 --> 00:45:33,520
to a string

1317
00:45:33,520 --> 00:45:35,839
all once again don't worry about the

1318
00:45:35,839 --> 00:45:37,440
details of these parameters we're going

1319
00:45:37,440 --> 00:45:39,119
to come back to this shortly

1320
00:45:39,119 --> 00:45:42,160
so set label to all then

1321
00:45:42,160 --> 00:45:45,680
round it to true and finally

1322
00:45:45,680 --> 00:45:50,319
filled to true so this is the end result

1323
00:45:50,319 --> 00:45:52,079
now let's run this cell using control

1324
00:45:52,079 --> 00:45:53,839
and enter

1325
00:45:53,839 --> 00:45:57,200
okay here we have a new file

1326
00:45:57,200 --> 00:45:59,680
music recommender dot dot that's a

1327
00:45:59,680 --> 00:46:00,960
little bit funny

1328
00:46:00,960 --> 00:46:03,200
so we want to open this file with vs

1329
00:46:03,200 --> 00:46:05,280
code so drag and drop this

1330
00:46:05,280 --> 00:46:08,560
into a vs code window

1331
00:46:10,000 --> 00:46:12,880
okay here's a dot format it's a textual

1332
00:46:12,880 --> 00:46:15,359
language for describing graphs

1333
00:46:15,359 --> 00:46:17,520
now to visualize this graph we need to

1334
00:46:17,520 --> 00:46:19,760
install an extension in vs code

1335
00:46:19,760 --> 00:46:22,160
so on the left side click the extensions

1336
00:46:22,160 --> 00:46:22,960
panel

1337
00:46:22,960 --> 00:46:26,560
and search for dot dot

1338
00:46:26,560 --> 00:46:28,400
look at the second extension here

1339
00:46:28,400 --> 00:46:30,160
graphviz or dot

1340
00:46:30,160 --> 00:46:33,359
language by staphon vs

1341
00:46:33,359 --> 00:46:35,440
go ahead and install this extension and

1342
00:46:35,440 --> 00:46:37,119
then reload vs code

1343
00:46:37,119 --> 00:46:39,520
once you do that you can visualize this

1344
00:46:39,520 --> 00:46:40,480
dot file

1345
00:46:40,480 --> 00:46:44,319
so let me close this tab all right

1346
00:46:44,319 --> 00:46:46,079
look at this dot dot here on the right

1347
00:46:46,079 --> 00:46:47,440
side click this

1348
00:46:47,440 --> 00:46:49,599
you should have a new menu open preview

1349
00:46:49,599 --> 00:46:50,640
to the site

1350
00:46:50,640 --> 00:46:53,680
so click that all right here's the

1351
00:46:53,680 --> 00:46:54,800
visualization

1352
00:46:54,800 --> 00:46:57,200
of our decision tree let's close the dot

1353
00:46:57,200 --> 00:46:58,400
file

1354
00:46:58,400 --> 00:47:00,880
there you go this is exactly how our

1355
00:47:00,880 --> 00:47:02,640
model makes predictions

1356
00:47:02,640 --> 00:47:04,880
so we have this binary tree which means

1357
00:47:04,880 --> 00:47:06,160
every node can have

1358
00:47:06,160 --> 00:47:09,119
a maximum of two children on top of each

1359
00:47:09,119 --> 00:47:10,160
node we have

1360
00:47:10,160 --> 00:47:12,720
a condition if this condition is true we

1361
00:47:12,720 --> 00:47:14,800
go to the child node on the left side

1362
00:47:14,800 --> 00:47:16,720
otherwise we go to the child node on the

1363
00:47:16,720 --> 00:47:18,560
right side so let's see what's happening

1364
00:47:18,560 --> 00:47:19,359
here

1365
00:47:19,359 --> 00:47:22,480
the first condition is age less than or

1366
00:47:22,480 --> 00:47:24,079
equal to 30.5

1367
00:47:24,079 --> 00:47:26,240
if this condition is false that means

1368
00:47:26,240 --> 00:47:28,400
that user is 30 years or older

1369
00:47:28,400 --> 00:47:30,079
so the genre of the music that they're

1370
00:47:30,079 --> 00:47:32,480
interested in is classical

1371
00:47:32,480 --> 00:47:35,280
so here we're classifying people based

1372
00:47:35,280 --> 00:47:36,559
on their profile

1373
00:47:36,559 --> 00:47:38,400
that is the reason we have the word

1374
00:47:38,400 --> 00:47:41,119
class here so a user who is 30 years or

1375
00:47:41,119 --> 00:47:41,760
older

1376
00:47:41,760 --> 00:47:44,640
belongs to the class of classical or

1377
00:47:44,640 --> 00:47:45,520
people who like

1378
00:47:45,520 --> 00:47:47,680
classical music now what if this

1379
00:47:47,680 --> 00:47:49,280
condition is true

1380
00:47:49,280 --> 00:47:52,400
that means that user is younger than 30.

1381
00:47:52,400 --> 00:47:55,359
so now we check the gender if it's less

1382
00:47:55,359 --> 00:47:55,839
than

1383
00:47:55,839 --> 00:47:58,960
0.5 which basically means if it equals

1384
00:47:58,960 --> 00:47:59,599
to 0

1385
00:47:59,599 --> 00:48:01,599
then we're dealing with a female so we

1386
00:48:01,599 --> 00:48:03,359
go to the child node here

1387
00:48:03,359 --> 00:48:05,839
now once again we have another condition

1388
00:48:05,839 --> 00:48:07,520
so we're dealing with a female who is

1389
00:48:07,520 --> 00:48:08,800
younger than 30.

1390
00:48:08,800 --> 00:48:11,200
once again we need to check their age so

1391
00:48:11,200 --> 00:48:12,319
is the age

1392
00:48:12,319 --> 00:48:16,000
less than 25.5 if that's the case then

1393
00:48:16,000 --> 00:48:18,800
that user likes dance music otherwise

1394
00:48:18,800 --> 00:48:21,040
they like acoustic music

1395
00:48:21,040 --> 00:48:22,800
so this is the decision tree that our

1396
00:48:22,800 --> 00:48:24,240
model uses to make

1397
00:48:24,240 --> 00:48:26,319
predictions now if you're wondering why

1398
00:48:26,319 --> 00:48:28,079
we have these floating point numbers

1399
00:48:28,079 --> 00:48:31,359
like 25.5 these are basically the rules

1400
00:48:31,359 --> 00:48:32,800
that our model generates

1401
00:48:32,800 --> 00:48:34,880
based on the patterns that it finds in

1402
00:48:34,880 --> 00:48:36,000
our data set

1403
00:48:36,000 --> 00:48:38,160
as we give our model more data these

1404
00:48:38,160 --> 00:48:40,079
rules will change so they're not always

1405
00:48:40,079 --> 00:48:41,119
the same

1406
00:48:41,119 --> 00:48:43,280
also the more columns or more features

1407
00:48:43,280 --> 00:48:45,200
we have our decision tree is going to

1408
00:48:45,200 --> 00:48:46,559
get more complex

1409
00:48:46,559 --> 00:48:48,800
currently we have only two features age

1410
00:48:48,800 --> 00:48:50,319
and gender

1411
00:48:50,319 --> 00:48:51,920
now back to our code let me quickly

1412
00:48:51,920 --> 00:48:53,200
explain the meaning of all these

1413
00:48:53,200 --> 00:48:54,160
parameters

1414
00:48:54,160 --> 00:48:56,559
we set fill to true so each box or each

1415
00:48:56,559 --> 00:48:58,640
node is filled with a color

1416
00:48:58,640 --> 00:49:01,119
we set rounded to true so they have

1417
00:49:01,119 --> 00:49:03,119
rounded corners

1418
00:49:03,119 --> 00:49:05,920
we set label to all so every node has

1419
00:49:05,920 --> 00:49:08,000
labels that we can read

1420
00:49:08,000 --> 00:49:10,240
we set class names to the unique list of

1421
00:49:10,240 --> 00:49:11,200
genres

1422
00:49:11,200 --> 00:49:12,720
and that's for displaying the class for

1423
00:49:12,720 --> 00:49:14,559
each node right here

1424
00:49:14,559 --> 00:49:16,960
and we set feature names to age and

1425
00:49:16,960 --> 00:49:17,680
gender

1426
00:49:17,680 --> 00:49:21,839
so we can see the rules in our notes

1427
00:49:22,800 --> 00:49:24,640
hey thank you for watching my tutorial i

1428
00:49:24,640 --> 00:49:25,839
hope you learned a lot and you're

1429
00:49:25,839 --> 00:49:27,200
excited to learn more

1430
00:49:27,200 --> 00:49:29,040
if you enjoyed this tutorial please like

1431
00:49:29,040 --> 00:49:30,720
and share it with others and be sure to

1432
00:49:30,720 --> 00:49:31,839
subscribe to my channel

1433
00:49:31,839 --> 00:49:34,160
as i upload new videos every week once

1434
00:49:34,160 --> 00:49:36,780
again thank you and i wish you all the

1435
00:49:36,780 --> 00:49:39,879
[Music]

1436
00:49:41,559 --> 00:49:44,559
best

